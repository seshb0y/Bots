import { ChatInputCommandInteraction, EmbedBuilder } from "discord.js";
import { runAllTests } from '../tests/testRunner';
import { logCommand, info } from '../utils/logger';

export async function runtestsCommand(interaction: ChatInputCommandInteraction) {
  await interaction.deferReply({ ephemeral: true });
  
  logCommand("–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", {
    userId: interaction.user.id,
    username: interaction.user.tag
  });
  
  try {
    info("üß™ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    
    const testResults = await runAllTests();
    
    // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    const embed = new EmbedBuilder()
      .setTitle("üß™ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
      .setColor(testResults.success ? 0x00ff00 : 0xff0000)
      .addFields(
        {
          name: "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
          value: `**–ü—Ä–æ–π–¥–µ–Ω–æ:** ${testResults.passed}/${testResults.total}\n**–°—Ç–∞—Ç—É—Å:** ${testResults.success ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –û—à–∏–±–∫–∏'}`,
          inline: false
        }
      )
      .setTimestamp();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É –Ω–∞–±–æ—Ä—É —Ç–µ—Å—Ç–æ–≤
    for (const [suiteName, suiteResult] of Object.entries(testResults.suiteResults)) {
      const status = suiteResult.passed === suiteResult.total ? '‚úÖ' : '‚ùå';
      embed.addFields({
        name: `${status} ${suiteName}`,
        value: `${suiteResult.passed}/${suiteResult.total} —Ç–µ—Å—Ç–æ–≤`,
        inline: true
      });
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if (testResults.errors.length > 0) {
      const errorText = testResults.errors.slice(0, 5).join('\n'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –æ—à–∏–±–æ–∫
      embed.addFields({
        name: "‚ùå –û—à–∏–±–∫–∏",
        value: errorText.length > 1000 ? errorText.substring(0, 1000) + '...' : errorText,
        inline: false
      });
      
      if (testResults.errors.length > 5) {
        embed.addFields({
          name: "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ",
          value: `–ò –µ—â–µ ${testResults.errors.length - 5} –æ—à–∏–±–æ–∫...`,
          inline: false
        });
      }
    }
    
    await interaction.editReply({ embeds: [embed] });
    
    logCommand(`–†—É—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${testResults.passed}/${testResults.total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`, {
      userId: interaction.user.id,
      username: interaction.user.tag,
      success: testResults.success
    });
    
  } catch (error) {
    logCommand("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏", error);
    
    const errorEmbed = new EmbedBuilder()
      .setTitle("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
      .setDescription("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤")
      .setColor(0xff0000)
      .addFields({
        name: "–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏",
        value: `\`\`\`${String(error).substring(0, 1000)}\`\`\``,
        inline: false
      })
      .setTimestamp();
    
    await interaction.editReply({ embeds: [errorEmbed] });
  }
} 