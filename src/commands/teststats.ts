import { ChatInputCommandInteraction, TextChannel } from "discord.js";
import { STATS_CHANNEL_ID } from "../constants";
import { loadPrevAndCurrMembers } from "../utils/clan";
import { normalize } from "../utils/normalize";

console.log("üîç –ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥—É–ª–∏ –≤ teststats...");
let fetchClanLeaderboardInfo: any, loadLeaderboardData: any, compareLeaderboardData: any;

try {
  const leaderboardModule = require("../utils/leaderboard");
  fetchClanLeaderboardInfo = leaderboardModule.fetchClanLeaderboardInfo;
  loadLeaderboardData = leaderboardModule.loadLeaderboardData;
  compareLeaderboardData = leaderboardModule.compareLeaderboardData;
  console.log("üîç –ú–æ–¥—É–ª–∏ leaderboard –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ");
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π leaderboard:", error);
}

export async function teststatsCommand(interaction: ChatInputCommandInteraction) {
  console.log("üîç –ö–æ–º–∞–Ω–¥–∞ teststats –≤—ã–∑–≤–∞–Ω–∞");
  await interaction.deferReply({ ephemeral: true });
  console.log("üîç deferReply –≤—ã–ø–æ–ª–Ω–µ–Ω");
  
  try {
    console.log("üîç –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã teststats");
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    await interaction.editReply("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...");
    let currentLeaderboardInfo = null;
    try {
      console.log("üîç –í—ã–∑—ã–≤–∞—é fetchClanLeaderboardInfo...");
      currentLeaderboardInfo = await fetchClanLeaderboardInfo("ALLIANCE");
      console.log("üîç fetchClanLeaderboardInfo –∑–∞–≤–µ—Ä—à–µ–Ω:", currentLeaderboardInfo);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:", error);
      await interaction.editReply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ. –ü—Ä–æ–¥–æ–ª–∂–∞—é –±–µ–∑ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö...");
    }
    
    console.log("üîç –ó–∞–≥—Ä—É–∂–∞—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...");
    const previousLeaderboardData = loadLeaderboardData();
    console.log("üîç –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:", previousLeaderboardData);
    
    await interaction.editReply("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...");
    const [prev, curr] = loadPrevAndCurrMembers();

    // –°–æ–ø–æ—Å—Ç–∞–≤–∏–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –Ω–∏–∫—É
    const prevMap = new Map<string, { nick: string; points: number }>();
    for (const p of prev) prevMap.set(normalize(p.nick), p);
    const currMap = new Map<string, { nick: string; points: number }>();
    for (const c of curr) currMap.set(normalize(c.nick), c);

    let totalDelta = 0;
    const changes: { nick: string; delta: number }[] = [];

    for (const [nickNorm, currPlayer] of currMap.entries()) {
      const prevPlayer = prevMap.get(nickNorm);
      if (prevPlayer) {
        const delta = currPlayer.points - prevPlayer.points;
        if (delta !== 0) {
          changes.push({ nick: currPlayer.nick, delta });
          totalDelta += delta;
        }
      }
    }

    await interaction.editReply("üìù –§–æ—Ä–º–∏—Ä—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...");
    
    let msg = `üìä **–¢–ï–°–¢–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–ö–ê**\n`;
    msg += `üïí **–í—Ä–µ–º—è:** ${new Date().toLocaleString("ru-RU")}\n\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    if (currentLeaderboardInfo && previousLeaderboardData) {
      const comparison = compareLeaderboardData(currentLeaderboardInfo, previousLeaderboardData);
      
      msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
      
      if (comparison.positionDirection === "up") {
        msg += `üìà –ü–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
      } else if (comparison.positionDirection === "down") {
        msg += `üìâ –û–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
      } else {
        msg += `‚û°Ô∏è –ú–µ—Å—Ç–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n`;
      }
      
      msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points.toLocaleString()}\n`;
      
      if (comparison.pointsDirection === "up") {
        msg += `üìà –ü–æ–ª—É—á–∏–ª–∏ ${comparison.pointsChange.toLocaleString()} –æ—á–∫–æ–≤\n`;
      } else if (comparison.pointsDirection === "down") {
        msg += `üìâ –ü–æ—Ç–µ—Ä—è–ª–∏ ${comparison.pointsChange.toLocaleString()} –æ—á–∫–æ–≤\n`;
      } else {
        msg += `‚û°Ô∏è –û—á–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å\n`;
      }
      
      msg += `\n`;
    } else if (currentLeaderboardInfo) {
      msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
      msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points.toLocaleString()}\n\n`;
    } else {
      msg += `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ\n\n`;
    }
    
    msg += `üë• **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**\n`;
    msg += `–ü–æ–ª–∫ –≤—Å–µ–≥–æ: ${totalDelta >= 0 ? "+" : ""}${totalDelta} –æ—á–∫–æ–≤\n`;
    
    if (changes.length > 0) {
      msg += `\nüìã **–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º:**\n`;
      for (const { nick, delta } of changes.sort((a, b) => b.delta - a.delta)) {
        msg += `‚Ä¢ ${nick}: ${delta >= 0 ? "+" : ""}${delta}\n`;
      }
    } else {
      msg += `\n‚úÖ –ó–∞ —Å—É—Ç–∫–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—á–∫–æ–≤ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const channel = await interaction.client.channels.fetch(STATS_CHANNEL_ID);
    if (channel && channel.isTextBased()) {
      await (channel as TextChannel).send(msg);
      await interaction.editReply("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª!");
    } else {
      await interaction.editReply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.");
    }
    
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã teststats:", error);
    await interaction.editReply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!");
  }
} 