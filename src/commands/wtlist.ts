import { 
  SlashCommandBuilder, 
  ChatInputCommandInteraction, 
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType
} from 'discord.js';
import { WTVehiclesAPI } from '../services/wtvehicles';
import { VehicleFormatter } from '../utils/vehicleFormatter';
import { logCommand, error } from '../utils/logger';

export const wtlistCommand = {
  data: new SlashCommandBuilder()
    .setName('wtlist')
    .setDescription('–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏ War Thunder —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏')
    .addStringOption(option =>
      option.setName('—Å—Ç—Ä–∞–Ω–∞')
        .setDescription('–°—Ç—Ä–∞–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∏')
        .setRequired(false)
        .addChoices(
          { name: 'üá∫üá∏ –°–®–ê', value: 'usa' },
          { name: 'üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è', value: 'germany' },
          { name: 'üá∑üá∫ –°–°–°–†', value: 'ussr' },
          { name: 'üá¨üáß –ë—Ä–∏—Ç–∞–Ω–∏—è', value: 'britain' },
          { name: 'üáØüáµ –Ø–ø–æ–Ω–∏—è', value: 'japan' },
          { name: 'üá®üá≥ –ö–∏—Ç–∞–π', value: 'china' },
          { name: 'üáÆüáπ –ò—Ç–∞–ª–∏—è', value: 'italy' },
          { name: 'üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è', value: 'france' },
          { name: 'üá∏üá™ –®–≤–µ—Ü–∏—è', value: 'sweden' },
          { name: 'üáÆüá± –ò–∑—Ä–∞–∏–ª—å', value: 'israel' }
        )
    )
    .addStringOption(option =>
      option.setName('—Ç–∏–ø')
        .setDescription('–¢–∏–ø —Ç–µ—Ö–Ω–∏–∫–∏')
        .setRequired(false)
        .addChoices(
          { name: '‚úàÔ∏è –ò—Å—Ç—Ä–µ–±–∏—Ç–µ–ª—å', value: 'fighter' },
          { name: 'üöÄ –®—Ç—É—Ä–º–æ–≤–∏–∫', value: 'attacker' },
          { name: 'üí£ –ë–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤—â–∏–∫', value: 'bomber' },
          { name: 'üöó –¢–∞–Ω–∫', value: 'tank' },
          { name: 'üéØ –ó–°–£', value: 'spaa' },
          { name: 'üí• –ü–¢-–°–ê–£', value: 'tank_destroyer' },
          { name: 'üèÉ –õ–µ–≥–∫–∏–π —Ç–∞–Ω–∫', value: 'light_tank' },
          { name: '‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π —Ç–∞–Ω–∫', value: 'medium_tank' },
          { name: 'üõ°Ô∏è –¢—è–∂–µ–ª—ã–π —Ç–∞–Ω–∫', value: 'heavy_tank' },
          { name: 'üö¢ –ö–æ—Ä–∞–±–ª—å', value: 'ship' },
          { name: '‚õµ –ö–∞—Ç–µ—Ä', value: 'boat' },
          { name: 'üöÅ –í–µ—Ä—Ç–æ–ª–µ—Ç', value: 'helicopter' }
        )
    )
    .addIntegerOption(option =>
      option.setName('—ç—Ä–∞')
        .setDescription('–≠—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏ (1-8)')
        .setRequired(false)
        .setMinValue(1)
        .setMaxValue(8)
    )
    .addNumberOption(option =>
      option.setName('–±—Ä_–º–∏–Ω')
        .setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥')
        .setRequired(false)
        .setMinValue(1.0)
        .setMaxValue(13.7)
    )
    .addNumberOption(option =>
      option.setName('–±—Ä_–º–∞–∫—Å')
        .setDescription('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–æ–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥')
        .setRequired(false)
        .setMinValue(1.0)
        .setMaxValue(13.7)
    )
    .addBooleanOption(option =>
      option.setName('–ø—Ä–µ–º–∏—É–º')
        .setDescription('–¢–æ–ª—å–∫–æ –ø—Ä–µ–º–∏—É–º–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')
        .setRequired(false)
    )
    .addBooleanOption(option =>
      option.setName('–ø–∞–∫')
        .setDescription('–¢–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')
        .setRequired(false)
    )
    .addBooleanOption(option =>
      option.setName('—ç—Å–∫–∞–¥—Ä–æ–Ω')
        .setDescription('–¢–æ–ª—å–∫–æ —ç—Å–∫–∞–¥—Ä–æ–Ω–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞')
        .setRequired(false)
    ),

  async execute(interaction: ChatInputCommandInteraction) {
    try {
      logCommand('wtlist', { 
        userId: interaction.user.id, 
        username: interaction.user.tag,
        filters: {
          country: interaction.options.getString('—Å—Ç—Ä–∞–Ω–∞'),
          type: interaction.options.getString('—Ç–∏–ø'),
          era: interaction.options.getInteger('—ç—Ä–∞'),
          br_min: interaction.options.getNumber('–±—Ä_–º–∏–Ω'),
          br_max: interaction.options.getNumber('–±—Ä_–º–∞–∫—Å'),
          premium: interaction.options.getBoolean('–ø—Ä–µ–º–∏—É–º'),
          pack: interaction.options.getBoolean('–ø–∞–∫'),
          squadron: interaction.options.getBoolean('—ç—Å–∫–∞–¥—Ä–æ–Ω')
        }
      });

      await interaction.deferReply();

      // –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      const filters: any = {};
      
      const country = interaction.options.getString('—Å—Ç—Ä–∞–Ω–∞');
      if (country) filters.country = country;
      
      const vehicleType = interaction.options.getString('—Ç–∏–ø');
      if (vehicleType) filters.vehicle_type = vehicleType;
      
      const era = interaction.options.getInteger('—ç—Ä–∞');
      if (era) filters.era = era;
      
      const brMin = interaction.options.getNumber('–±—Ä_–º–∏–Ω');
      if (brMin) filters.br_min = brMin;
      
      const brMax = interaction.options.getNumber('–±—Ä_–º–∞–∫—Å');
      if (brMax) filters.br_max = brMax;
      
      const isPremium = interaction.options.getBoolean('–ø—Ä–µ–º–∏—É–º');
      if (isPremium !== null) filters.is_premium = isPremium;
      
      const isPack = interaction.options.getBoolean('–ø–∞–∫');
      if (isPack !== null) filters.is_pack = isPack;
      
      const isSquadron = interaction.options.getBoolean('—ç—Å–∫–∞–¥—Ä–æ–Ω');
      if (isSquadron !== null) filters.squadron_vehicle = isSquadron;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ BR
      if (brMin && brMax && brMin > brMax) {
        const embed = new EmbedBuilder()
          .setTitle('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω BR')
          .setDescription('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ–µ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.')
          .setColor('#ff0000');
        
        await interaction.editReply({ embeds: [embed] });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏
      const vehicles = await WTVehiclesAPI.getVehiclesList(filters);

      if (vehicles.length === 0) {
        const embed = new EmbedBuilder()
          .setTitle('‚ùå –¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
          .setDescription('–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
          .setColor('#ff0000');
        
        await interaction.editReply({ embeds: [embed] });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
      let title = 'üìã –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–Ω–∏–∫–∏ War Thunder';
      const filterDescriptions: string[] = [];
      
      if (country) filterDescriptions.push(`–°—Ç—Ä–∞–Ω–∞: ${VehicleFormatter.getCountryFlag(country)}`);
      if (vehicleType) filterDescriptions.push(`–¢–∏–ø: ${VehicleFormatter.formatVehicleType(vehicleType)}`);
      if (era) filterDescriptions.push(`–≠—Ä–∞: ${era}`);
      if (brMin || brMax) {
        const brRange = brMin && brMax ? `${brMin}-${brMax}` : 
                       brMin ? `–æ—Ç ${brMin}` : `–¥–æ ${brMax}`;
        filterDescriptions.push(`–ë–†: ${brRange}`);
      }
      if (isPremium) filterDescriptions.push('üíé –ü—Ä–µ–º–∏—É–º');
      if (isPack) filterDescriptions.push('üì¶ –ü–∞–∫–∏');
      if (isSquadron) filterDescriptions.push('üë• –≠—Å–∫–∞–¥—Ä–æ–Ω');

      if (filterDescriptions.length > 0) {
        title += ` (${filterDescriptions.join(', ')})`;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ BR
      vehicles.sort((a, b) => a.realistic_br - b.realistic_br);

      // –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      const itemsPerPage = 20;
      const totalPages = Math.ceil(vehicles.length / itemsPerPage);
      let currentPage = 0;

      const createPageEmbed = (page: number): EmbedBuilder => {
        const start = page * itemsPerPage;
        const end = Math.min(start + itemsPerPage, vehicles.length);
        const pageVehicles = vehicles.slice(start, end);

        const embed = VehicleFormatter.createVehicleListEmbed(pageVehicles, title);
        
        if (totalPages > 1) {
          embed.setFooter({ 
            text: `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${page + 1} –∏–∑ ${totalPages} ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${vehicles.length} —Ç–µ—Ö–Ω–∏–∫` 
          });
        } else {
          embed.setFooter({ 
            text: `–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${vehicles.length} —Ç–µ—Ö–Ω–∏–∫` 
          });
        }

        return embed;
      };

      const embed = createPageEmbed(currentPage);

      // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
      if (totalPages <= 1) {
        await interaction.editReply({ embeds: [embed] });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const createNavigationRow = (page: number): ActionRowBuilder<ButtonBuilder> => {
        return new ActionRowBuilder<ButtonBuilder>()
          .addComponents(
            new ButtonBuilder()
              .setCustomId('first')
              .setLabel('‚èÆÔ∏è –ü–µ—Ä–≤–∞—è')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(page === 0),
            new ButtonBuilder()
              .setCustomId('prev')
              .setLabel('‚óÄÔ∏è –ù–∞–∑–∞–¥')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(page === 0),
            new ButtonBuilder()
              .setCustomId('next')
              .setLabel('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(page === totalPages - 1),
            new ButtonBuilder()
              .setCustomId('last')
              .setLabel('–ü–æ—Å–ª–µ–¥–Ω—è—è ‚è≠Ô∏è')
              .setStyle(ButtonStyle.Secondary)
              .setDisabled(page === totalPages - 1)
          );
      };

      const row = createNavigationRow(currentPage);

      const response = await interaction.editReply({ 
        embeds: [embed], 
        components: [row] 
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const collector = response.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 300000 // 5 –º–∏–Ω—É—Ç
      });

      collector.on('collect', async (buttonInteraction) => {
        if (buttonInteraction.user.id !== interaction.user.id) {
          await buttonInteraction.reply({ 
            content: '–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.', 
            ephemeral: true 
          });
          return;
        }

        await buttonInteraction.deferUpdate();

        switch (buttonInteraction.customId) {
          case 'first':
            currentPage = 0;
            break;
          case 'prev':
            currentPage = Math.max(0, currentPage - 1);
            break;
          case 'next':
            currentPage = Math.min(totalPages - 1, currentPage + 1);
            break;
          case 'last':
            currentPage = totalPages - 1;
            break;
        }

        const newEmbed = createPageEmbed(currentPage);
        const newRow = createNavigationRow(currentPage);

        await buttonInteraction.editReply({ 
          embeds: [newEmbed], 
          components: [newRow] 
        });
      });

      collector.on('end', async () => {
        try {
          // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
          const disabledRow = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
              new ButtonBuilder()
                .setCustomId('first')
                .setLabel('‚èÆÔ∏è –ü–µ—Ä–≤–∞—è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(true),
              new ButtonBuilder()
                .setCustomId('prev')
                .setLabel('‚óÄÔ∏è –ù–∞–∑–∞–¥')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(true),
              new ButtonBuilder()
                .setCustomId('next')
                .setLabel('–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(true),
              new ButtonBuilder()
                .setCustomId('last')
                .setLabel('–ü–æ—Å–ª–µ–¥–Ω—è—è ‚è≠Ô∏è')
                .setStyle(ButtonStyle.Secondary)
                .setDisabled(true)
            );
          
          await interaction.editReply({ components: [disabledRow] });
        } catch (err) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        }
      });

    } catch (err) {
      error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wtlist:', err);
      
      const errorEmbed = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        .setColor('#ff0000');

      if (interaction.deferred) {
        await interaction.editReply({ embeds: [errorEmbed] });
      } else {
        await interaction.reply({ embeds: [errorEmbed] });
      }
    }
  },
}; 