import { 
  SlashCommandBuilder, 
  ChatInputCommandInteraction, 
  EmbedBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  ComponentType
} from 'discord.js';
import { WTVehiclesAPI } from '../services/wtvehicles';
import { VehicleFormatter } from '../utils/vehicleFormatter';
import { logCommand, error } from '../utils/logger';

export const wtvehicleCommand = {
  data: new SlashCommandBuilder()
    .setName('wtvehicle')
    .setDescription('–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ—Ö–Ω–∏–∫–µ War Thunder')
    .addStringOption(option =>
      option.setName('–Ω–∞–∑–≤–∞–Ω–∏–µ')
        .setDescription('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞')
        .setRequired(true)
    )
    .addBooleanOption(option =>
      option.setName('–æ—Ä—É–∂–∏–µ')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–∏')
        .setRequired(false)
    ),

  async execute(interaction: ChatInputCommandInteraction) {
    try {
      logCommand('wtvehicle', { 
        userId: interaction.user.id, 
        username: interaction.user.tag,
        query: interaction.options.getString('–Ω–∞–∑–≤–∞–Ω–∏–µ'),
        weapons: interaction.options.getBoolean('–æ—Ä—É–∂–∏–µ')
      });

      const vehicleName = interaction.options.getString('–Ω–∞–∑–≤–∞–Ω–∏–µ', true);
      const showWeapons = interaction.options.getBoolean('–æ—Ä—É–∂–∏–µ') || false;

      await interaction.deferReply();

      // –ü–æ–∏—Å–∫ —Ç–µ—Ö–Ω–∏–∫–∏
      const searchResults = await WTVehiclesAPI.searchVehicles(vehicleName);

      if (searchResults.length === 0) {
        const embed = new EmbedBuilder()
          .setTitle('‚ùå –¢–µ—Ö–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
          .setDescription(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ—Ö–Ω–∏–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º "${vehicleName}"`)
          .setColor('#ff0000');
        
        await interaction.editReply({ embeds: [embed] });
        return;
      }

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –æ–¥–Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –¥–µ—Ç–∞–ª–∏
      if (searchResults.length === 1) {
        const vehicle = await WTVehiclesAPI.getVehicle(searchResults[0].identifier);
        
        if (showWeapons) {
          const weaponsEmbed = VehicleFormatter.createWeaponsEmbed(vehicle);
          await interaction.editReply({ embeds: [weaponsEmbed] });
        } else {
          const embed = VehicleFormatter.createVehicleEmbed(vehicle);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
          const row = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
              new ButtonBuilder()
                .setCustomId(`wt_weapons_${vehicle.identifier}`)
                .setLabel('üî´ –í–æ–æ—Ä—É–∂–µ–Ω–∏–µ')
                .setStyle(ButtonStyle.Secondary),
              new ButtonBuilder()
                .setCustomId(`wt_modifications_${vehicle.identifier}`)
                .setLabel('üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                .setStyle(ButtonStyle.Secondary)
            );

          await interaction.editReply({ embeds: [embed], components: [row] });
        }
        return;
      }

      // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
      const listEmbed = VehicleFormatter.createVehicleListEmbed(
        searchResults, 
        `üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: "${vehicleName}"`
      );

      // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ—Ö–Ω–∏–∫–∏ (–º–∞–∫—Å–∏–º—É–º 5)
      const buttons: ButtonBuilder[] = [];
      searchResults.slice(0, 5).forEach((vehicle, index) => {
        buttons.push(
          new ButtonBuilder()
            .setCustomId(`wt_select_${vehicle.identifier}`)
            .setLabel(`${index + 1}. ${VehicleFormatter.formatVehicleName(vehicle.identifier)}`)
            .setStyle(ButtonStyle.Primary)
        );
      });

      const row = new ActionRowBuilder<ButtonBuilder>().addComponents(buttons);

      const response = await interaction.editReply({ 
        embeds: [listEmbed], 
        components: [row] 
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
      const collector = response.createMessageComponentCollector({
        componentType: ComponentType.Button,
        time: 60000 // 1 –º–∏–Ω—É—Ç–∞
      });

      collector.on('collect', async (buttonInteraction) => {
        if (buttonInteraction.user.id !== interaction.user.id) {
          await buttonInteraction.reply({ 
            content: '–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏–π –∫–æ–º–∞–Ω–¥—É, –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏.', 
            ephemeral: true 
          });
          return;
        }

        await buttonInteraction.deferUpdate();

        const customId = buttonInteraction.customId;
        
        if (customId.startsWith('wt_select_')) {
          const vehicleId = customId.replace('wt_select_', '');
          const vehicle = await WTVehiclesAPI.getVehicle(vehicleId);
          const embed = VehicleFormatter.createVehicleEmbed(vehicle);
          
          const newRow = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
              new ButtonBuilder()
                .setCustomId(`wt_weapons_${vehicle.identifier}`)
                .setLabel('üî´ –í–æ–æ—Ä—É–∂–µ–Ω–∏–µ')
                .setStyle(ButtonStyle.Secondary),
              new ButtonBuilder()
                .setCustomId(`wt_modifications_${vehicle.identifier}`)
                .setLabel('üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                .setStyle(ButtonStyle.Secondary),
              new ButtonBuilder()
                .setCustomId('wt_back')
                .setLabel('‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
                .setStyle(ButtonStyle.Secondary)
            );

          await buttonInteraction.editReply({ embeds: [embed], components: [newRow] });
        }
        else if (customId.startsWith('wt_weapons_')) {
          const vehicleId = customId.replace('wt_weapons_', '');
          const vehicle = await WTVehiclesAPI.getVehicle(vehicleId);
          const weaponsEmbed = VehicleFormatter.createWeaponsEmbed(vehicle);
          
          const backButton = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
              new ButtonBuilder()
                .setCustomId(`wt_back_to_${vehicleId}`)
                .setLabel('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Ö–Ω–∏–∫–µ')
                .setStyle(ButtonStyle.Secondary)
            );

          await buttonInteraction.editReply({ embeds: [weaponsEmbed], components: [backButton] });
        }
        else if (customId.startsWith('wt_modifications_')) {
          const vehicleId = customId.replace('wt_modifications_', '');
          const vehicle = await WTVehiclesAPI.getVehicle(vehicleId);
          const modificationsEmbed = createModificationsEmbed(vehicle);
          
          const backButton = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
              new ButtonBuilder()
                .setCustomId(`wt_back_to_${vehicleId}`)
                .setLabel('‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–µ—Ö–Ω–∏–∫–µ')
                .setStyle(ButtonStyle.Secondary)
            );

          await buttonInteraction.editReply({ embeds: [modificationsEmbed], components: [backButton] });
        }
        else if (customId.startsWith('wt_back_to_')) {
          const vehicleId = customId.replace('wt_back_to_', '');
          const vehicle = await WTVehiclesAPI.getVehicle(vehicleId);
          const embed = VehicleFormatter.createVehicleEmbed(vehicle);
          
          const newRow = new ActionRowBuilder<ButtonBuilder>()
            .addComponents(
              new ButtonBuilder()
                .setCustomId(`wt_weapons_${vehicle.identifier}`)
                .setLabel('üî´ –í–æ–æ—Ä—É–∂–µ–Ω–∏–µ')
                .setStyle(ButtonStyle.Secondary),
              new ButtonBuilder()
                .setCustomId(`wt_modifications_${vehicle.identifier}`)
                .setLabel('üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                .setStyle(ButtonStyle.Secondary)
            );

          await buttonInteraction.editReply({ embeds: [embed], components: [newRow] });
        }
        else if (customId === 'wt_back') {
          await buttonInteraction.editReply({ embeds: [listEmbed], components: [row] });
        }
      });

      collector.on('end', async () => {
        try {
          // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
          await interaction.editReply({ components: [] });
        } catch (err) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        }
      });

    } catch (err) {
      error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ wtvehicle:', err);
      
      const errorEmbed = new EmbedBuilder()
        .setTitle('‚ùå –û—à–∏–±–∫–∞')
        .setDescription('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ—Ö–Ω–∏–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        .setColor('#ff0000');

      if (interaction.deferred) {
        await interaction.editReply({ embeds: [errorEmbed] });
      } else {
        await interaction.reply({ embeds: [errorEmbed] });
      }
    }
  },
};

function createModificationsEmbed(vehicle: any): EmbedBuilder {
  const embed = new EmbedBuilder()
    .setTitle(`üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${VehicleFormatter.formatVehicleName(vehicle.identifier)}`)
    .setColor('#9b59b6')
    .setThumbnail(vehicle.images.image);

  if (!vehicle.modifications || vehicle.modifications.length === 0) {
    embed.setDescription('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.');
    return embed;
  }

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
  const modsByTier: { [key: number]: any[] } = {};
  vehicle.modifications.forEach((mod: any) => {
    if (!modsByTier[mod.tier]) {
      modsByTier[mod.tier] = [];
    }
    modsByTier[mod.tier].push(mod);
  });

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
  Object.keys(modsByTier).sort((a, b) => parseInt(a) - parseInt(b)).forEach(tier => {
    const tierMods = modsByTier[parseInt(tier)];
    const modsList = tierMods.slice(0, 5).map(mod => {
      const classEmoji = getModificationClassEmoji(mod.mod_class);
      return `${classEmoji} **${mod.name.replace(/_/g, ' ')}** (${formatNumber(mod.value)} ü¶Å, ${formatNumber(mod.req_exp)} ‚≠ê)`;
    }).join('\n');

    embed.addFields({
      name: `üìä –£—Ä–æ–≤–µ–Ω—å ${tier} (${tierMods.length} –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π)`,
      value: modsList || '–ù–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π',
      inline: false
    });
  });

  if (vehicle.modifications.length > 20) {
    embed.setFooter({ text: `–ü–æ–∫–∞–∑–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ ${vehicle.modifications.length} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö` });
  }

  return embed;
}

function getModificationClassEmoji(modClass: string): string {
  const emojis: { [key: string]: string } = {
    'weapon': 'üî´',
    'armor': 'üõ°Ô∏è',
    'lth': '‚ö°',
    'seakeeping': 'üåä'
  };
  return emojis[modClass] || 'üîß';
}

function formatNumber(num: number): string {
  return num.toLocaleString('ru-RU');
} 