import { 
  SlashCommandBuilder, 
  ChatInputCommandInteraction, 
  EmbedBuilder,
  PermissionFlagsBits,
  StringSelectMenuBuilder,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle
} from "discord.js";
import { info, error } from "../utils/logger.js";
import { 
  loadAircraftData, 
  addAircraft, 
  removeAircraft, 
  updateAircraft, 
  getAircraftByType,
  getAircraftTypeName,
  getAircraftTypeShort,
  AircraftType,
  Aircraft
} from "../utils/aircraft.js";

// ID —Ä–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤
const AIRCRAFT_ADMIN_ROLE_ID = "832294803706085396";

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤
function hasAircraftAdminRole(interaction: ChatInputCommandInteraction): boolean {
  if (!interaction.member || !interaction.guild) return false;
  
  const member = interaction.member;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (member.permissions && typeof member.permissions === 'object' && 'has' in member.permissions) {
    try {
      if (member.permissions.has(PermissionFlagsBits.Administrator)) {
        return true;
      }
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤
  if ('roles' in member && member.roles && typeof member.roles === 'object' && 'cache' in member.roles) {
    try {
      return member.roles.cache.has(AIRCRAFT_ADMIN_ROLE_ID);
    } catch (err) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
    }
  }
  
  return false;
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤
export async function aircraftListCommand(interaction: ChatInputCommandInteraction) {
  try {
    info(`[AIRCRAFT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª—ë—Ç–æ–≤`);
    
    const type = interaction.options.getString("—Ç–∏–ø") as AircraftType | null;
    const data = loadAircraftData();
    
    if (type) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º–æ–ª—ë—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞
      const aircraft = data[type] || [];
      const typeName = getAircraftTypeName(type);
      
      if (aircraft.length === 0) {
        await interaction.reply({
          content: `‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **${typeName}** –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–º–æ–ª—ë—Ç–æ–≤`,
          ephemeral: true
        });
        return;
      }
      
      const embed = new EmbedBuilder()
        .setTitle(`‚úàÔ∏è –°–∞–º–æ–ª—ë—Ç—ã: ${typeName}`)
        .setDescription(`–í—Å–µ–≥–æ —Å–∞–º–æ–ª—ë—Ç–æ–≤: **${aircraft.length}**`)
        .setColor(0x00ff00)
        .setTimestamp();
      
      aircraft.forEach((plane, index) => {
        embed.addFields({
          name: `${index + 1}. ${plane.name}`,
          value: `**–ù–∞—Ü–∏—è:** ${plane.nation}\n**–ë–†:** ${plane.br}\n**ID:** \`${plane.id}\`${plane.description ? `\n**–û–ø–∏—Å–∞–Ω–∏–µ:** ${plane.description}` : ''}`,
          inline: true
        });
      });
      
      await interaction.reply({ embeds: [embed], ephemeral: true });
      
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const embed = new EmbedBuilder()
        .setTitle("‚úàÔ∏è –°–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª—ë—Ç–æ–≤")
        .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–º–æ–ª—ë—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        .setColor(0x00ff00)
        .setTimestamp();
      
      Object.entries(data).forEach(([type, aircraft]) => {
        const typeName = getAircraftTypeName(type as AircraftType);
        embed.addFields({
          name: typeName,
          value: `**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** ${aircraft.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤`,
          inline: true
        });
      });
      
      // –°–æ–∑–¥–∞—ë–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("aircraft_type_select")
        .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–º–æ–ª—ë—Ç–æ–≤")
        .addOptions([
          { label: "–ü–æ—Ä—à–Ω–µ–≤–∞—è –∞–≤–∏–∞—Ü–∏—è", value: "piston", description: `–ü–æ–∫–∞–∑–∞—Ç—å ${data.piston.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤` },
          { label: "–†–∞–Ω–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤—ã", value: "early_jet", description: `–ü–æ–∫–∞–∑–∞—Ç—å ${data.early_jet.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤` },
          { label: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ç–∏–≤—ã", value: "modern_jet", description: `–ü–æ–∫–∞–∑–∞—Ç—å ${data.modern_jet.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤` }
        ]);
      
      const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);
      
      await interaction.reply({ embeds: [embed], components: [row], ephemeral: true });
    }
    
    info(`[AIRCRAFT] –°–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª—ë—Ç–æ–≤ –ø–æ–∫–∞–∑–∞–Ω –¥–ª—è ${interaction.user.tag}`);
    
  } catch (err) {
    error(`[AIRCRAFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤ –¥–ª—è ${interaction.user.tag}:`, err);
    await interaction.reply({
      content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤",
      ephemeral: true
    });
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª—ë—Ç–∞
export async function aircraftAddCommand(interaction: ChatInputCommandInteraction) {
  try {
    info(`[AIRCRAFT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–ª—ë—Ç`);
    
    if (!hasAircraftAdminRole(interaction)) {
      await interaction.reply({
        content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —Å–∞–º–æ–ª—ë—Ç–æ–≤",
        ephemeral: true
      });
      return;
    }
    
    const type = interaction.options.getString("—Ç–∏–ø", true) as AircraftType;
    const name = interaction.options.getString("–Ω–∞–∑–≤–∞–Ω–∏–µ", true);
    const br = interaction.options.getString("–±—Ä", true);
    const nation = interaction.options.getString("–Ω–∞—Ü–∏—è", true);
    const description = interaction.options.getString("–æ–ø–∏—Å–∞–Ω–∏–µ");
    const id = interaction.options.getString("id") || name.toLowerCase().replace(/\s+/g, "_");
    
    const aircraft: Aircraft = {
      id,
      name,
      type,
      br,
      nation,
      description: description || undefined
    };
    
    addAircraft(aircraft);
    
    const embed = new EmbedBuilder()
      .setTitle("‚úÖ –°–∞–º–æ–ª—ë—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
      .setDescription(`–°–∞–º–æ–ª—ë—Ç **${name}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é **${getAircraftTypeName(type)}**`)
      .setColor(0x00ff00)
      .addFields(
        { name: "ID", value: id, inline: true },
        { name: "–¢–∏–ø", value: getAircraftTypeName(type), inline: true },
        { name: "–ë–†", value: br, inline: true },
        { name: "–ù–∞—Ü–∏—è", value: nation, inline: true }
      )
      .setTimestamp();
    
    if (description) {
      embed.addFields({ name: "–û–ø–∏—Å–∞–Ω–∏–µ", value: description, inline: false });
    }
    
    await interaction.reply({ embeds: [embed], ephemeral: true });
    info(`[AIRCRAFT] –°–∞–º–æ–ª—ë—Ç "${name}" –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}`);
    
  } catch (err) {
    error(`[AIRCRAFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}:`, err);
    await interaction.reply({
      content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç–∞: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      ephemeral: true
    });
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–∞–º–æ–ª—ë—Ç–∞
export async function aircraftRemoveCommand(interaction: ChatInputCommandInteraction) {
  try {
    info(`[AIRCRAFT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–ª—ë—Ç`);
    
    if (!hasAircraftAdminRole(interaction)) {
      await interaction.reply({
        content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —Å–∞–º–æ–ª—ë—Ç–æ–≤",
        ephemeral: true
      });
      return;
    }
    
    const type = interaction.options.getString("—Ç–∏–ø", true) as AircraftType;
    const aircraftId = interaction.options.getString("id", true);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–ª—ë—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const data = loadAircraftData();
    const aircraft = data[type].find(a => a.id === aircraftId);
    
    if (!aircraft) {
      await interaction.reply({
        content: `‚ùå –°–∞–º–æ–ª—ë—Ç —Å ID "${aircraftId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${getAircraftTypeName(type)}`,
        ephemeral: true
      });
      return;
    }
    
    removeAircraft(type, aircraftId);
    
    const embed = new EmbedBuilder()
      .setTitle("üóëÔ∏è –°–∞–º–æ–ª—ë—Ç —É–¥–∞–ª—ë–Ω")
      .setDescription(`–°–∞–º–æ–ª—ë—Ç **${aircraft.name}** —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **${getAircraftTypeName(type)}**`)
      .setColor(0xff0000)
      .addFields(
        { name: "ID", value: aircraftId, inline: true },
        { name: "–ù–∞–∑–≤–∞–Ω–∏–µ", value: aircraft.name, inline: true },
        { name: "–¢–∏–ø", value: getAircraftTypeName(type), inline: true }
      )
      .setTimestamp();
    
    await interaction.reply({ embeds: [embed], ephemeral: true });
    info(`[AIRCRAFT] –°–∞–º–æ–ª—ë—Ç "${aircraft.name}" —É–¥–∞–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}`);
    
  } catch (err) {
    error(`[AIRCRAFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}:`, err);
    await interaction.reply({
      content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç–∞: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      ephemeral: true
    });
  }
}

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∞–º–æ–ª—ë—Ç–∞
export async function aircraftUpdateCommand(interaction: ChatInputCommandInteraction) {
  try {
    info(`[AIRCRAFT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${interaction.user.tag} (${interaction.user.id}) –ø—ã—Ç–∞–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–∞–º–æ–ª—ë—Ç`);
    
    if (!hasAircraftAdminRole(interaction)) {
      await interaction.reply({
        content: "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º —Å–∞–º–æ–ª—ë—Ç–æ–≤",
        ephemeral: true
      });
      return;
    }
    
    const type = interaction.options.getString("—Ç–∏–ø", true) as AircraftType;
    const aircraftId = interaction.options.getString("id", true);
    const name = interaction.options.getString("–Ω–∞–∑–≤–∞–Ω–∏–µ");
    const br = interaction.options.getString("–±—Ä");
    const nation = interaction.options.getString("–Ω–∞—Ü–∏—è");
    const description = interaction.options.getString("–æ–ø–∏—Å–∞–Ω–∏–µ");
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–∞–º–æ–ª—ë—Ç–∞
    const data = loadAircraftData();
    const currentAircraft = data[type].find(a => a.id === aircraftId);
    
    if (!currentAircraft) {
      await interaction.reply({
        content: `‚ùå –°–∞–º–æ–ª—ë—Ç —Å ID "${aircraftId}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${getAircraftTypeName(type)}`,
        ephemeral: true
      });
      return;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–æ–ª—è
    const updatedAircraft: Aircraft = {
      ...currentAircraft,
      name: name || currentAircraft.name,
      br: br || currentAircraft.br,
      nation: nation || currentAircraft.nation,
      description: description !== null ? description : currentAircraft.description
    };
    
    updateAircraft(updatedAircraft);
    
    const embed = new EmbedBuilder()
      .setTitle("‚úèÔ∏è –°–∞–º–æ–ª—ë—Ç –æ–±–Ω–æ–≤–ª—ë–Ω")
      .setDescription(`–°–∞–º–æ–ª—ë—Ç **${updatedAircraft.name}** —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω`)
      .setColor(0x00ff00)
      .addFields(
        { name: "ID", value: aircraftId, inline: true },
        { name: "–ù–∞–∑–≤–∞–Ω–∏–µ", value: updatedAircraft.name, inline: true },
        { name: "–¢–∏–ø", value: getAircraftTypeName(type), inline: true },
        { name: "–ë–†", value: updatedAircraft.br, inline: true },
        { name: "–ù–∞—Ü–∏—è", value: updatedAircraft.nation, inline: true }
      )
      .setTimestamp();
    
    if (updatedAircraft.description) {
      embed.addFields({ name: "–û–ø–∏—Å–∞–Ω–∏–µ", value: updatedAircraft.description, inline: false });
    }
    
    await interaction.reply({ embeds: [embed], ephemeral: true });
    info(`[AIRCRAFT] –°–∞–º–æ–ª—ë—Ç "${updatedAircraft.name}" –æ–±–Ω–æ–≤–ª—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}`);
    
  } catch (err) {
    error(`[AIRCRAFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${interaction.user.tag}:`, err);
    await interaction.reply({
      content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∞–º–æ–ª—ë—Ç–∞: ${err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      ephemeral: true
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤
export async function handleAircraftTypeSelect(interaction: any) {
  try {
    if (!interaction.isStringSelectMenu()) return;
    
    if (interaction.customId === "aircraft_type_select") {
      const type = interaction.values[0] as AircraftType;
      const data = loadAircraftData();
      const aircraft = data[type] || [];
      const typeName = getAircraftTypeName(type);
      
      if (aircraft.length === 0) {
        await interaction.update({
          content: `‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ **${typeName}** –ø–æ–∫–∞ –Ω–µ—Ç —Å–∞–º–æ–ª—ë—Ç–æ–≤`,
          embeds: [],
          components: []
        });
        return;
      }
      
      const embed = new EmbedBuilder()
        .setTitle(`‚úàÔ∏è –°–∞–º–æ–ª—ë—Ç—ã: ${typeName}`)
        .setDescription(`–í—Å–µ–≥–æ —Å–∞–º–æ–ª—ë—Ç–æ–≤: **${aircraft.length}**`)
        .setColor(0x00ff00)
        .setTimestamp();
      
      aircraft.forEach((plane, index) => {
        embed.addFields({
          name: `${index + 1}. ${plane.name}`,
          value: `**–ù–∞—Ü–∏—è:** ${plane.nation}\n**–ë–†:** ${plane.br}\n**ID:** \`${plane.id}\`${plane.description ? `\n**–û–ø–∏—Å–∞–Ω–∏–µ:** ${plane.description}` : ''}`,
          inline: true
        });
      });
      
      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
      const backButton = new ButtonBuilder()
        .setCustomId("aircraft_list_back")
        .setLabel("‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É")
        .setStyle(ButtonStyle.Secondary)
        .setEmoji("‚¨ÖÔ∏è");
      
      const row = new ActionRowBuilder<ButtonBuilder>().addComponents(backButton);
      
      await interaction.update({ embeds: [embed], components: [row] });
    }
    
  } catch (err) {
    error(`[AIRCRAFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Ç–∏–ø–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤:`, err);
    await interaction.update({
      content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤",
      embeds: [],
      components: []
    });
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∞–º–æ–ª—ë—Ç–æ–≤
export async function handleAircraftListBack(interaction: any) {
  try {
    if (!interaction.isButton()) return;
    
    if (interaction.customId === "aircraft_list_back") {
      const data = loadAircraftData();
      
      const embed = new EmbedBuilder()
        .setTitle("‚úàÔ∏è –°–ø–∏—Å–æ–∫ —Å–∞–º–æ–ª—ë—Ç–æ–≤")
        .setDescription("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–º–æ–ª—ë—Ç–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
        .setColor(0x00ff00)
        .setTimestamp();
      
      Object.entries(data).forEach(([type, aircraft]) => {
        const typeName = getAircraftTypeName(type as AircraftType);
        embed.addFields({
          name: typeName,
          value: `**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** ${aircraft.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤`,
          inline: true
        });
      });
      
      // –°–æ–∑–¥–∞—ë–º —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞
      const selectMenu = new StringSelectMenuBuilder()
        .setCustomId("aircraft_type_select")
        .setPlaceholder("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∞–º–æ–ª—ë—Ç–æ–≤")
        .addOptions([
          { label: "–ü–æ—Ä—à–Ω–µ–≤–∞—è –∞–≤–∏–∞—Ü–∏—è", value: "piston", description: `–ü–æ–∫–∞–∑–∞—Ç—å ${data.piston.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤` },
          { label: "–†–∞–Ω–Ω–∏–µ —Ä–µ–∞–∫—Ç–∏–≤—ã", value: "early_jet", description: `–ü–æ–∫–∞–∑–∞—Ç—å ${data.early_jet.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤` },
          { label: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ç–∏–≤—ã", value: "modern_jet", description: `–ü–æ–∫–∞–∑–∞—Ç—å ${data.modern_jet.length} —Å–∞–º–æ–ª—ë—Ç–æ–≤` }
        ]);
      
      const row = new ActionRowBuilder<StringSelectMenuBuilder>().addComponents(selectMenu);
      
      await interaction.update({ embeds: [embed], components: [row] });
    }
    
  } catch (err) {
    error(`[AIRCRAFT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥":`, err);
    await interaction.update({
      content: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É",
      embeds: [],
      components: []
    });
  }
}
