import { ChatInputCommandInteraction } from "discord.js";
import pidusage from "pidusage";
import * as fs from "fs";
import * as path from "path";

let maxCpu = 0;
let maxMem = 0;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω—É—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let monitoringActive = false;
let monitoringStartTime = 0;
let minuteStats = {
  maxCpu: 0,
  maxMemory: 0,
  maxHeapUsed: 0,
  maxHeapTotal: 0,
  maxExternal: 0,
  functionStats: {} as Record<string, {
    calls: number,
    totalTime: number,
    maxTime: number,
    avgTime: number
  }>
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
function trackFunctionPerformance(functionName: string, startTime: number) {
  if (!monitoringActive) return;
  
  const duration = Date.now() - startTime;
  
  if (!minuteStats.functionStats[functionName]) {
    minuteStats.functionStats[functionName] = {
      calls: 0,
      totalTime: 0,
      maxTime: 0,
      avgTime: 0
    };
  }
  
  const stats = minuteStats.functionStats[functionName];
  stats.calls++;
  stats.totalTime += duration;
  stats.maxTime = Math.max(stats.maxTime, duration);
  stats.avgTime = stats.totalTime / stats.calls;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
async function monitorResources() {
  if (!monitoringActive) return;
  
  try {
    const stats = await pidusage(process.pid);
    const memoryMB = stats.memory / 1024 / 1024;
    const nodeMemoryUsage = process.memoryUsage();
    const heapUsedMB = nodeMemoryUsage.heapUsed / 1024 / 1024;
    const heapTotalMB = nodeMemoryUsage.heapTotal / 1024 / 1024;
    const externalMB = nodeMemoryUsage.external / 1024 / 1024;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–µ –Ω–∞–≥—Ä—É–∑–∫–∏
    minuteStats.maxCpu = Math.max(minuteStats.maxCpu, stats.cpu);
    minuteStats.maxMemory = Math.max(minuteStats.maxMemory, memoryMB);
    minuteStats.maxHeapUsed = Math.max(minuteStats.maxHeapUsed, heapUsedMB);
    minuteStats.maxHeapTotal = Math.max(minuteStats.maxHeapTotal, heapTotalMB);
    minuteStats.maxExternal = Math.max(minuteStats.maxExternal, externalMB);
    
  } catch (err) {
    console.log('–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ—Å—É—Ä—Å–æ–≤:', err);
  }
}

export async function resourcesCommand(
  interaction: ChatInputCommandInteraction
) {
  const option = interaction.options.getString("option", true);
  
  if (option === "start") {
    if (monitoringActive) {
      await interaction.reply({ content: "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!", ephemeral: true });
      return;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitoringActive = true;
    monitoringStartTime = Date.now();
    minuteStats = {
      maxCpu: 0,
      maxMemory: 0,
      maxHeapUsed: 0,
      maxHeapTotal: 0,
      maxExternal: 0,
      functionStats: {}
    };
    
    await interaction.reply({ content: "üîç **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—É—â–µ–Ω!**\n–ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.", ephemeral: true });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    const monitorInterval = setInterval(monitorResources, 1000);
    
    // –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    setTimeout(async () => {
      monitoringActive = false;
      clearInterval(monitorInterval);
      
      const endTime = Date.now();
      const duration = endTime - monitoringStartTime;
      
      let report = `üìä **–û–¢–ß–ï–¢ –û –†–ï–°–£–†–°–ê–• –ë–û–¢–ê** (${new Date(monitoringStartTime).toLocaleTimeString("ru-RU")} - ${new Date(endTime).toLocaleTimeString("ru-RU")})\n\n`;
      report += `üî• **–ü–ò–ö–û–í–´–ï –ù–ê–ì–†–£–ó–ö–ò:**\n`;
      report += `‚Ä¢ CPU: ${minuteStats.maxCpu.toFixed(2)}%\n`;
      report += `‚Ä¢ RAM: ${minuteStats.maxMemory.toFixed(2)} MB\n`;
      report += `‚Ä¢ Heap Used: ${minuteStats.maxHeapUsed.toFixed(2)} MB\n`;
      report += `‚Ä¢ Heap Total: ${minuteStats.maxHeapTotal.toFixed(2)} MB\n`;
      report += `‚Ä¢ External: ${minuteStats.maxExternal.toFixed(2)} MB\n\n`;
      
      if (Object.keys(minuteStats.functionStats).length > 0) {
        report += `‚ö° **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –§–£–ù–ö–¶–ò–ô:**\n`;
        for (const [funcName, funcStats] of Object.entries(minuteStats.functionStats)) {
          if (funcStats.calls > 0) {
            const percentOfTotal = ((funcStats.totalTime / duration) * 100).toFixed(2);
            report += `‚Ä¢ **${funcName}:**\n`;
            report += `  - –í—ã–∑–æ–≤–æ–≤: ${funcStats.calls}\n`;
            report += `  - –û–±—â–µ–µ –≤—Ä–µ–º—è: ${funcStats.totalTime.toFixed(2)}ms\n`;
            report += `  - –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${funcStats.avgTime.toFixed(2)}ms\n`;
            report += `  - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${funcStats.maxTime.toFixed(2)}ms\n`;
            report += `  - % –æ—Ç –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: ${percentOfTotal}%\n\n`;
          }
        }
      } else {
        report += `‚ÑπÔ∏è –ó–∞ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π.\n`;
      }
      
      try {
        await interaction.followUp({ content: report, ephemeral: true });
      } catch (err) {
        console.log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', err);
      }
      
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    
  } else if (option === "current") {
    await interaction.deferReply({ ephemeral: true });
    pidusage(process.pid, (err: Error | null, stats: any) => {
      if (err) {
        interaction.editReply("Failed to get resource usage.");
      } else {
        if (stats.cpu > maxCpu) maxCpu = stats.cpu;
        if (stats.memory > maxMem) maxMem = stats.memory;
        interaction.editReply(
          `Resource usage:\n` +
            `CPU: ${stats.cpu.toFixed(2)}% (max: ${maxCpu.toFixed(2)}%)\n` +
            `Memory: ${(stats.memory / 1024 / 1024).toFixed(2)} MB (max: ${(
              maxMem /
              1024 /
              1024
            ).toFixed(2)} MB)`
        );
      }
    });
  } else {
    await interaction.reply({ content: "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'start' –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–ª–∏ 'current' –¥–ª—è —Ç–µ–∫—É—â–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.", ephemeral: true });
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export { trackFunctionPerformance };
