import axios from "axios";
import * as cheerio from "cheerio";
import * as fs from "fs";
import * as path from "path";

const membersAPath = path.join(__dirname, "..", "data", "members_a.json");
const membersBPath = path.join(__dirname, "..", "data", "members_b.json");
const statePath = path.join(__dirname, "..", "data", "members_state.json");
const leaversTrackingPath = path.join(__dirname, "..", "data", "leavers_tracking.json");

export async function fetchClanPoints(
  clanTag: string,
  retryCount: number = 0
): Promise<{ nick: string; points: number }[]> {
  const maxRetries = 3;
  
  try {
    console.log(`üåê –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ ${clanTag}${retryCount > 0 ? ` (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1})` : ''}`);
    
    // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∞–Ω–µ
    const url = `https://warthunder.com/ru/community/claninfo/${clanTag}`;
    
    // –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const { data: html } = await axios.get(url, {
      headers: {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Accept-Language": "ru-RU,ru;q=0.9,en;q=0.8",
        "Accept-Encoding": "gzip, deflate, br",
        "DNT": "1",
        "Connection": "keep-alive",
        "Upgrade-Insecure-Requests": "1",
        "Sec-Fetch-Dest": "document",
        "Sec-Fetch-Mode": "navigate",
        "Sec-Fetch-Site": "none",
        "Sec-Fetch-User": "?1",
        "Cache-Control": "max-age=0",
        "Sec-Ch-Ua": '"Not_A Brand";v="8", "Chromium";v="120", "Google Chrome";v="120"',
        "Sec-Ch-Ua-Mobile": "?0",
        "Sec-Ch-Ua-Platform": '"Windows"'
      },
      timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      maxRedirects: 5
    });
    
    console.log(`üìÑ –î–ª–∏–Ω–∞ HTML: ${html.length}`);

    const $ = cheerio.load(html);
    const members: { nick: string; points: number }[] = [];
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤
    const playerLinks = $('a[href*="/community/userinfo/"]');
    
    playerLinks.each((index, element) => {
      const $link = $(element);
      const nick = $link.text().trim();
      
      if (nick && nick.length > 1 && !nick.match(/^\d+$/)) {
        // –ò—â–µ–º –æ—á–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        // –û—á–∫–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–æ–∫–µ –ø–æ—Å–ª–µ –Ω–∏–∫–Ω–µ–π–º–∞
        const $parent = $link.parent();
        const $row = $parent.parent();
        const $cells = $row.find('td');
        
        if ($cells.length >= 3) {
          // –¢—Ä–µ—Ç–∏–π —Å—Ç–æ–ª–±–µ—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—á–∫–∏
          const pointsText = $cells.eq(2).text().trim();
          const points = parseInt(pointsText, 10);
          
          if (!isNaN(points)) {
            members.push({ nick, points });
          }
        }
      }
    });
    
    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    if (members.length === 0) {
      console.log(`üîç –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...`);
      
      const allText = $.text();
      const lines = allText.split('\n').map(line => line.trim()).filter(line => line.length > 0);
      
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω: –¥–∞—Ç–∞, –Ω–æ–º–µ—Ä, –Ω–∏–∫–Ω–µ–π–º, –æ—á–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
      for (let i = 0; i < lines.length - 4; i++) {
        const dateLine = lines[i];
        const numberLine = lines[i + 1];
        const nickLine = lines[i + 2];
        const pointsLine = lines[i + 3];
        const activityLine = lines[i + 4];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        if (dateLine.match(/^\d{2}\.\d{2}\.\d{4}$/) && // –¥–∞—Ç–∞
            numberLine.match(/^\d+$/) && // –Ω–æ–º–µ—Ä
            nickLine.match(/^[A-Za-z0-9_\-\.]+$/) && // –Ω–∏–∫–Ω–µ–π–º
            pointsLine.match(/^\d+$/) && // –æ—á–∫–∏
            activityLine.match(/^\d+$/)) { // –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          
          const nick = nickLine;
          const points = parseInt(pointsLine, 10);
          
          if (points >= 0 && points < 10000) {
            members.push({ nick, points });
          }
        }
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueMembers = members.filter((member, index, self) => 
      index === self.findIndex(m => m.nick === member.nick)
    );
    
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${uniqueMembers.length} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ ${clanTag}`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º (—É–±—ã–≤–∞–Ω–∏–µ)
    uniqueMembers.sort((a, b) => b.points - a.points);
    
    return uniqueMembers;
    
  } catch (error: any) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ ${clanTag}:`, error.message);
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ 403 –∏ –µ—Å—Ç—å –µ—â–µ –ø–æ–ø—ã—Ç–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    if (error.response?.status === 403 && retryCount < maxRetries) {
      const delay = Math.pow(2, retryCount) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1—Å, 2—Å, 4—Å
      console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
      await new Promise(resolve => setTimeout(resolve, delay));
      return fetchClanPoints(clanTag, retryCount + 1);
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞–Ω–∞ ${clanTag} –ø–æ—Å–ª–µ ${retryCount + 1} –ø–æ–ø—ã—Ç–æ–∫`);
    return [];
  }
}

function getActiveFile(): "a" | "b" {
  if (!fs.existsSync(statePath)) return "a";
  try {
    const state = JSON.parse(fs.readFileSync(statePath, "utf-8"));
    return state.active === "b" ? "b" : "a";
  } catch {
    return "a";
  }
}

function setActiveFile(active: "a" | "b") {
  fs.writeFileSync(statePath, JSON.stringify({ active }, null, 2));
}

export function saveMembersAlternating(
  members: { nick: string; points: number }[]
) {
  const active = getActiveFile();
  if (active === "a") {
    fs.writeFileSync(membersAPath, JSON.stringify(members, null, 2));
    setActiveFile("b");
  } else {
    fs.writeFileSync(membersBPath, JSON.stringify(members, null, 2));
    setActiveFile("a");
  }
}

export function loadPrevAndCurrMembers(): [
  { nick: string; points: number }[],
  { nick: string; points: number }[]
] {
  const active = getActiveFile();
  let prev: { nick: string; points: number }[] = [];
  let curr: { nick: string; points: number }[] = [];
  try {
    if (active === "a") {
      prev = fs.existsSync(membersBPath)
        ? JSON.parse(fs.readFileSync(membersBPath, "utf-8"))
        : [];
      curr = fs.existsSync(membersAPath)
        ? JSON.parse(fs.readFileSync(membersAPath, "utf-8"))
        : [];
    } else {
      prev = fs.existsSync(membersAPath)
        ? JSON.parse(fs.readFileSync(membersAPath, "utf-8"))
        : [];
      curr = fs.existsSync(membersBPath)
        ? JSON.parse(fs.readFileSync(membersBPath, "utf-8"))
        : [];
    }
  } catch {
    prev = [];
    curr = [];
  }
  return [prev, curr];
}

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, members_1630.json)
export function saveMembersAtTime(
  members: { nick: string; points: number }[],
  timeLabel: string
) {
  const filePath = path.join(
    __dirname,
    "..",
    "data",
    `members_${timeLabel}.json`
  );
  fs.writeFileSync(filePath, JSON.stringify(members, null, 2));
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
export function loadMembersAtTime(
  timeLabel: string
): { nick: string; points: number }[] {
  const filePath = path.join(
    __dirname,
    "..",
    "data",
    `members_${timeLabel}.json`
  );
  if (!fs.existsSync(filePath)) return [];
  return JSON.parse(fs.readFileSync(filePath, "utf-8"));
}

function normalizeNick(nick: string) {
  return nick.toLowerCase().replace(/\s+/g, "").trim();
}

export function findLeavers(
  prev: { nick: string; points: number }[],
  curr: { nick: string; points: number }[]
): { nick: string; points: number }[] {
  const currNicks = new Set(curr.map((m) => normalizeNick(m.nick)));
  return prev.filter((m) => !currNicks.has(normalizeNick(m.nick)));
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
export function loadLeaversTracking(): { nick: string; points: number }[] {
  if (!fs.existsSync(leaversTrackingPath)) return [];
  try {
    return JSON.parse(fs.readFileSync(leaversTrackingPath, "utf-8"));
  } catch {
    return [];
  }
}

export function saveLeaversTracking(members: { nick: string; points: number }[]) {
  fs.writeFileSync(leaversTrackingPath, JSON.stringify(members, null, 2));
}

export function findLeaversFromTracking(
  currentMembers: { nick: string; points: number }[]
): { nick: string; points: number }[] {
  const trackedMembers = loadLeaversTracking();
  const currNicks = new Set(currentMembers.map((m) => normalizeNick(m.nick)));
  return trackedMembers.filter((m) => !currNicks.has(normalizeNick(m.nick)));
}

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const membersCurrentPath = path.join(__dirname, "..", "data", "members_current.json");

// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
export function saveCurrentMembers(
  members: { nick: string; points: number }[]
) {
  fs.writeFileSync(membersCurrentPath, JSON.stringify(members, null, 2));
}

// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
export function loadCurrentMembers(): { nick: string; points: number }[] {
  if (!fs.existsSync(membersCurrentPath)) return [];
  try {
    return JSON.parse(fs.readFileSync(membersCurrentPath, "utf-8"));
  } catch {
    return [];
  }
}

// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
export function compareMembersData(
  prev: { nick: string; points: number }[],
  curr: { nick: string; points: number }[]
): { totalDelta: number; changes: { nick: string; delta: number }[] } {
  const prevMap = new Map(prev.map((p) => [normalizeNick(p.nick), p]));
  const currMap = new Map(curr.map((c) => [normalizeNick(c.nick), c]));
  
  let totalDelta = 0;
  const changes: { nick: string; delta: number }[] = [];
  
  for (const [nickNorm, currPlayer] of currMap.entries()) {
    const prevPlayer = prevMap.get(nickNorm);
    if (prevPlayer) {
      const delta = currPlayer.points - prevPlayer.points;
      if (delta !== 0) {
        changes.push({ nick: currPlayer.nick, delta });
        totalDelta += delta;
      }
    }
  }
  
  return { totalDelta, changes };
}
