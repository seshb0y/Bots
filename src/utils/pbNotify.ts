import { Client, TextChannel } from "discord.js";
import {
  OFFICER_ROLE_IDS,
  ANNOUNCE_CHANNEL_ID,
  VOICE_CHANNEL_IDS,
} from "../constants";
import { logPbNotify, info } from "./logger";

let pbAnnounced = false;
let pbOfficer = "";
let pbAnnounceDate = "";

function getNextPbNotifyDelayMs() {
  const now = new Date();
  const mskHour = now.getUTCHours() + 3;
  const minute = now.getMinutes();
  const second = now.getSeconds();
  
  // –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: 17:00 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
  const targetHour = 17;
  const targetMinute = 0;
  
  let target = new Date(now);
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
  target.setUTCHours(targetHour - 3, targetMinute, 0, 0);
  
  // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 17:00 —É–∂–µ –ø—Ä–æ—à–ª–æ, –∂–¥–µ–º –¥–æ –∑–∞–≤—Ç—Ä–∞
  if (target <= now) {
    target.setDate(target.getDate() + 1);
  }
  
  const diff = target.getTime() - now.getTime();
  logPbNotify(`–°–µ–π—á–∞—Å (–ú–°–ö): ${mskHour}:${minute < 10 ? "0" + minute : minute}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${Math.round(diff / 1000)} —Å–µ–∫ (${target.toLocaleTimeString("ru-RU", {timeZone: "Europe/Moscow"})})`);
  return diff;
}

export async function askOfficersForPb(client: Client) {
  const now = new Date();
  const mskHour = now.getUTCHours() + 3;
  const minute = now.getMinutes();
  const second = now.getSeconds();
  
  logPbNotify(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ${mskHour}:${minute < 10 ? "0" + minute : minute}:${second < 10 ? "0" + second : second}`);
  
  if (mskHour === 17 && minute === 0) {
    const today = new Date().toISOString().slice(0, 10);
    const { pbAnnounced: isPbAnnouncedToday, pbAnnounceDate: announcedDate } = getPbAnnounced();
    if (isPbAnnouncedToday && announcedDate === today) return;

    logPbNotify("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ñ–∏—Ü–µ—Ä–∞–º –æ –ü–ë");
    
    const guild = client.guilds.cache.first();
    if (!guild) {
      logPbNotify("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–∏–ª—å–¥–∏—é");
      return;
    }

    const officers = guild.members.cache.filter((member) =>
      member.roles.cache.some((role) => OFFICER_ROLE_IDS.includes(role.id))
    );

    logPbNotify(`–ù–∞–π–¥–µ–Ω–æ –æ—Ñ–∏—Ü–µ—Ä–æ–≤: ${officers.size}`);

    for (const [userId, member] of officers) {
      try {
        const embed = {
          color: 0x2ecc71,
          title: "üö© –°–±–æ—Ä –Ω–∞ –ü–æ–ª–∫–æ–≤—ã–µ –ë–æ–∏",
          description:
            "–ü—Ä–∏–≤–µ—Ç! –ü–æ—Ä–∞ —Å–æ–±–∏—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –Ω–∞ –ü–æ–ª–∫–æ–≤—ã–µ –ë–æ–∏.\n\n" +
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–±—ä—è–≤–∏—Ç—å —Å–±–æ—Ä –≤ –∫–∞–Ω–∞–ª–µ.",
          footer: {
            text: "–í—Ä–µ–º—è: 17:00 –ú–°–ö",
          },
        };

        const row = {
          type: 1,
          components: [
            {
              type: 2,
              style: 3,
              label: "–°–æ–±–∏—Ä–∞—é",
              custom_id: "pb_yes",
            },
          ],
        };

        await member.send({
          embeds: [embed],
          components: [row],
        });
        
        logPbNotify(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ñ–∏—Ü–µ—Ä—É: ${member.user.tag}`);
      } catch (error) {
        logPbNotify(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ñ–∏—Ü–µ—Ä—É ${member.user.tag}`, error);
      }
    }
    
    logPbNotify("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ñ–∏—Ü–µ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
  } else {
    logPbNotify("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ñ–∏—Ü–µ—Ä–∞–º");
  }
}

export async function pbNotifyScheduler(client: Client) {
  const now = new Date();
  const mskHour = now.getUTCHours() + 3;
  if (
    mskHour >= 17 &&
    mskHour < 22
  ) {
    await askOfficersForPb(client);
  }
  
  setTimeout(() => pbNotifyScheduler(client), getNextPbNotifyDelayMs());
}

export async function autoPbAnnounceScheduler(client: Client) {
  const now = new Date();
  const mskHour = now.getUTCHours() + 3;
  if (mskHour >= 17 && mskHour < 22) {
    const guild = client.guilds.cache.first();
    const channelIds = [
      "763085196118851608",
      "885928590720524328",
      "821082995188170783"
    ];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–∞–∂–¥–æ–º –∫–∞–Ω–∞–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ
    let totalCount = 0;
    let mainChannelCount = 0; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –∫–∞–Ω–∞–ª–µ 763085196118851608
    
    for (const id of channelIds) {
      const channel = await guild?.channels.fetch(id);
      if (channel?.isVoiceBased()) {
        const channelCount = Array.from(channel.members.values()).filter(m => !m.user.bot).length;
        totalCount += channelCount;
        
        // –û—Ç–¥–µ–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –ª—é–¥–µ–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        if (id === "763085196118851608") {
          mainChannelCount = channelCount;
        }
      }
    }
    
    const plus = Math.max(0, 8 - totalCount);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å –ª—é–¥–∏ –ò –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 8
    if (mainChannelCount > 0 && totalCount < 8) {
      const announceChannel = await client.channels.fetch("763085196118851607");
      if (announceChannel && announceChannel.isTextBased()) {
        await (announceChannel as TextChannel).send(`@everyone +${plus}`);
        logPbNotify(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ü–ë: +${plus} (–≤—Å–µ–≥–æ –≤ –∫–∞–Ω–∞–ª–∞—Ö: ${totalCount}, –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ: ${mainChannelCount})`);
      }
    } else {
      if (mainChannelCount === 0) {
        logPbNotify(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ü–ë –ø—Ä–æ–ø—É—â–µ–Ω–æ (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç –ª—é–¥–µ–π: ${mainChannelCount})`);
      } else {
        logPbNotify(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ü–ë –ø—Ä–æ–ø—É—â–µ–Ω–æ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—é–¥–µ–π: ${totalCount})`);
      }
    }
  }
  setTimeout(() => autoPbAnnounceScheduler(client), 20 * 60 * 1000);
}

export function setPbAnnounced(value: boolean, officer: string, date: string) {
  pbAnnounced = value;
  pbOfficer = officer;
  pbAnnounceDate = date;
  logPbNotify(`–ü–ë –æ–±—ä—è–≤–ª–µ–Ω: ${value}, –æ—Ñ–∏—Ü–µ—Ä: ${officer}, –¥–∞—Ç–∞: ${date}`);
}

export function getPbAnnounced() {
  return { pbAnnounced, pbOfficer, pbAnnounceDate };
}
