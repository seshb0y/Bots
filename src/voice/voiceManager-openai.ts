import {
  VoiceConnection,
  createAudioPlayer,
  createAudioResource,
  AudioPlayerStatus,
  VoiceConnectionStatus,
  joinVoiceChannel,
  EndBehaviorType,
} from '@discordjs/voice';
import { VoiceChannel, GuildMember } from 'discord.js';
import { createReadStream, createWriteStream, existsSync, unlinkSync } from 'fs';
import { join } from 'path';
import * as prism from 'prism-media';
import { OpenAI } from 'openai';
import { info, warn, error } from '../utils/logger';

interface VoiceSession {
  connection: VoiceConnection;
  channel: VoiceChannel;
  isListening: boolean;
  audioStreams: Map<string, prism.opus.Decoder>;
}

export class VoiceManager {
  private sessions: Map<string, VoiceSession> = new Map();
  private openai: OpenAI;
  private tempDir: string;

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY!,
    });
    this.tempDir = join(__dirname, '../../temp');
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (!existsSync(this.tempDir)) {
      require('fs').mkdirSync(this.tempDir, { recursive: true });
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
   */
  async joinChannel(channel: VoiceChannel): Promise<boolean> {
    try {
      const connection = joinVoiceChannel({
        channelId: channel.id,
        guildId: channel.guild.id,
        adapterCreator: channel.guild.voiceAdapterCreator,
        selfDeaf: false,
        selfMute: true,
      });

      const session: VoiceSession = {
        connection,
        channel,
        isListening: false,
        audioStreams: new Map(),
      };

      this.sessions.set(channel.id, session);

      connection.on(VoiceConnectionStatus.Ready, () => {
        info(`–ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: ${channel.name}`);
      });

      connection.on(VoiceConnectionStatus.Disconnected, () => {
        info(`–û—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞: ${channel.name}`);
        this.cleanup(channel.id);
      });

      connection.on('error', (err) => {
        error(`–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ ${channel.name}:`, err);
      });

      return true;
    } catch (err) {
      error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–Ω–∞–ª—É ${channel.name}:`, err);
      return false;
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
   */
  async leaveChannel(channelId: string): Promise<void> {
    const session = this.sessions.get(channelId);
    if (session) {
      session.connection.destroy();
      this.cleanup(channelId);
    }
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  async startListening(channelId: string): Promise<boolean> {
    const session = this.sessions.get(channelId);
    if (!session) {
      warn(`–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ: ${channelId}`);
      return false;
    }

    if (session.isListening) {
      warn(`–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ: ${session.channel.name}`);
      return false;
    }

    try {
      session.isListening = true;
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∞—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      session.connection.receiver.speaking.on('start', (userId) => {
        info(`üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–∞—á–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–µ ${session.channel.name}`);
        this.handleUserSpeaking(session, userId);
      });

      session.connection.receiver.speaking.on('end', (userId) => {
        info(`üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–µ—Ä–µ—Å—Ç–∞–ª –≥–æ–≤–æ—Ä–∏—Ç—å –≤ –∫–∞–Ω–∞–ª–µ ${session.channel.name}`);
      });

      info(`–ù–∞—á–∞—Ç–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: ${session.channel.name}`);
      return true;
    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ ${session.channel.name}:`, err);
      session.isListening = false;
      return false;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  async stopListening(channelId: string): Promise<void> {
    const session = this.sessions.get(channelId);
    if (session) {
      session.isListening = false;
      session.audioStreams.clear();
      info(`–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ: ${session.channel.name}`);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async handleUserSpeaking(session: VoiceSession, userId: string): Promise<void> {
    if (!session.isListening) return;

    info(`üéôÔ∏è –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);

    try {
      const audioStream = session.connection.receiver.subscribe(userId, {
        end: {
          behavior: EndBehaviorType.AfterSilence,
          duration: 3000, // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∏—à–∏–Ω—ã
        },
      });

      const decoder = new prism.opus.Decoder({
        frameSize: 960,
        channels: 2,
        rate: 48000,
      });

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º PCM —Ñ–æ—Ä–º–∞—Ç –≤–º–µ—Å—Ç–æ WAV –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const fileName = `voice_${userId}_${Date.now()}.pcm`;
      const filePath = join(this.tempDir, fileName);
      const writeStream = createWriteStream(filePath);

      info(`üéµ –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å –∞—É–¥–∏–æ: ${fileName}`);
      audioStream.pipe(decoder).pipe(writeStream);

      writeStream.on('finish', async () => {
        info(`üìÅ –ê—É–¥–∏–æ—Ñ–∞–π–ª –∑–∞–ø–∏—Å–∞–Ω: ${filePath}`);
        try {
          const transcription = await this.transcribeAudio(filePath);
          info(`üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: "${transcription}"`);
          if (transcription && transcription.trim()) {
            await this.processVoiceCommand(session, userId, transcription);
          } else {
            info(`‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          }
        } catch (err) {
          error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err);
        } finally {
          // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
          if (existsSync(filePath)) {
            unlinkSync(filePath);
            info(`üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: ${filePath}`);
          }
        }
      });

    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err);
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç PCM –≤ WAV —Ñ–æ—Ä–º–∞—Ç
   */
  private async convertPcmToWav(pcmPath: string): Promise<string> {
    const wavPath = pcmPath.replace('.pcm', '.wav');
    
    // –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PCM –≤ WAV —Å –ø–æ–º–æ—â—å—é ffmpeg
    const ffmpeg = require('@ffmpeg-installer/ffmpeg');
    const { spawn } = require('child_process');
    
    return new Promise((resolve, reject) => {
      const ffmpegProcess = spawn(ffmpeg.path, [
        '-f', 's16le',           // input format: signed 16-bit little endian
        '-ar', '48000',          // sample rate
        '-ac', '2',              // channels
        '-i', pcmPath,           // input file
        '-y',                    // overwrite output
        wavPath                  // output file
      ]);

      ffmpegProcess.on('close', (code: number) => {
        if (code === 0) {
          resolve(wavPath);
        } else {
          reject(new Error(`FFmpeg exited with code ${code}`));
        }
      });

      ffmpegProcess.on('error', (err: Error) => {
        reject(err);
      });
    });
  }

  /**
   * –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é OpenAI Whisper
   */
  private async transcribeAudio(filePath: string): Promise<string | null> {
    try {
      let audioFilePath = filePath;
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª PCM, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV
      if (filePath.endsWith('.pcm')) {
        info(`üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é PCM –≤ WAV: ${filePath}`);
        audioFilePath = await this.convertPcmToWav(filePath);
        info(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${audioFilePath}`);
      }
      
      const audioFile = createReadStream(audioFilePath);
      
      const transcription = await this.openai.audio.transcriptions.create({
        file: audioFile,
        model: 'whisper-1',
        language: 'ru',
        response_format: 'text',
      });

      // –£–¥–∞–ª—è–µ–º WAV —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω –∏–∑ PCM
      if (audioFilePath !== filePath && existsSync(audioFilePath)) {
        unlinkSync(audioFilePath);
      }

      return transcription as string;
    } catch (err) {
      error('–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ:', err);
      return null;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
   */
  private async processVoiceCommand(session: VoiceSession, userId: string, command: string): Promise<void> {
    try {
      const member = session.channel.members.get(userId);
      if (!member) return;

      info(`–ì–æ–ª–æ—Å–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ—Ç ${member.displayName}: "${command}"`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      const lowerCommand = command.toLowerCase();
      
      if (lowerCommand.includes('—Å—Ç–æ–ø') || lowerCommand.includes('–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å')) {
        await this.handleStopCommand(session, member);
      } else if (lowerCommand.includes('—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') || lowerCommand.includes('—Å—Ç–∞—Ç–∞')) {
        await this.handleStatsCommand(session, member);
      } else if (lowerCommand.includes('–æ—á–µ—Ä–µ–¥—å') || lowerCommand.includes('–∫—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏')) {
        await this.handleQueueCommand(session, member);
      } else if (lowerCommand.includes('–ø–æ–º–æ—â—å') || lowerCommand.includes('–∫–æ–º–∞–Ω–¥—ã')) {
        await this.handleHelpCommand(session, member);
      } else {
        // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º OpenAI –¥–ª—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
        await this.handleUnknownCommand(session, member, command);
      }

    } catch (err) {
      error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã "${command}" –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, err);
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
   */
  private async handleStopCommand(session: VoiceSession, member: GuildMember): Promise<void> {
    await this.stopListening(session.channel.id);
    await this.speakText(session, `${member.displayName}, –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.`);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  private async handleStatsCommand(session: VoiceSession, member: GuildMember): Promise<void> {
    const channelCount = session.channel.members.filter(m => !m.user.bot).size;
    await this.speakText(session, `–í –∫–∞–Ω–∞–ª–µ —Å–µ–π—á–∞—Å ${channelCount} —á–µ–ª–æ–≤–µ–∫.`);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—á–µ—Ä–µ–¥–∏
   */
  private async handleQueueCommand(session: VoiceSession, member: GuildMember): Promise<void> {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π –æ—á–µ—Ä–µ–¥–∏
    await this.speakText(session, `${member.displayName}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –≥–æ–ª–æ—Å.`);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
   */
  private async handleHelpCommand(session: VoiceSession, member: GuildMember): Promise<void> {
    const helpText = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: —Å—Ç–æ–ø, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ—á–µ—Ä–µ–¥—å, –ø–æ–º–æ—â—å.";
    await this.speakText(session, helpText);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é OpenAI
   */
  private async handleUnknownCommand(session: VoiceSession, member: GuildMember, command: string): Promise<void> {
    try {
      const response = await this.openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ Discord –±–æ—Ç–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "${command}". 
            –û–ø—Ä–µ–¥–µ–ª–∏, —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç, –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–ª–æ–≤).
            –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤—è–∑–∞–Ω–æ —Å –±–æ—Ç–æ–º –∏–ª–∏ Discord, —Å–∫–∞–∂–∏ —á—Ç–æ –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.`
          },
          {
            role: 'user',
            content: command
          }
        ],
        max_tokens: 100,
        temperature: 0.7,
      });

      const aiResponse = response.choices[0]?.message?.content;
      if (aiResponse) {
        await this.speakText(session, aiResponse);
      } else {
        await this.speakText(session, `${member.displayName}, —è –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.`);
      }

    } catch (err) {
      error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ OpenAI:', err);
      await this.speakText(session, `${member.displayName}, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.`);
    }
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–º (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ TTS)
   */
  private async speakText(session: VoiceSession, text: string): Promise<void> {
    // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å TTS (Text-to-Speech)
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    info(`[–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç –≤ ${session.channel.name}]: ${text}`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
    try {
      const textChannel = session.channel.guild.channels.cache
        .find(ch => ch.name.includes('–æ–±—â–∏–π') || ch.name.includes('general')) as any;
      
      if (textChannel && textChannel.isTextBased()) {
        await textChannel.send(`üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç:** ${text}`);
      }
    } catch (err) {
      warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', err);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
   */
  getActiveSessions(): Map<string, VoiceSession> {
    return new Map(this.sessions);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
   */
  isListening(channelId: string): boolean {
    const session = this.sessions.get(channelId);
    return session ? session.isListening : false;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Å—Å–∏–∏
   */
  private cleanup(channelId: string): void {
    const session = this.sessions.get(channelId);
    if (session) {
      session.audioStreams.clear();
      this.sessions.delete(channelId);
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞
   */
  async cleanup_all(): Promise<void> {
    for (const [channelId, session] of this.sessions) {
      session.connection.destroy();
    }
    this.sessions.clear();
    info('–í—Å–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏ –æ—á–∏—â–µ–Ω—ã');
  }
} 