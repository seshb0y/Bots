import {
  Client,
  GatewayIntentBits,
  GuildMember,
  Interaction,
  Message,
  User,
  TextChannel,
  Guild,
} from "discord.js";
import { config } from "dotenv";
import {
  usersPath,
  trackedPath,
  OFFICER_ROLE_IDS,
  ANNOUNCE_CHANNEL_ID,
  VOICE_CHANNEL_IDS,
  STATS_CHANNEL_ID,
} from "./constants";
import { loadJson, saveJson } from "./utils/json";
import { UserData, TrackedPlayer } from "./types";
import { pbNotifyScheduler, autoPbAnnounceScheduler } from "./utils/pbNotify";
import {
  saveMembersAtTime,
  loadMembersAtTime,
  fetchClanPoints,
  saveMembersAlternating,
  saveCurrentMembers,
  loadCurrentMembers,
  compareMembersData,
} from "./utils/clan";
import { markStatsCollectionCompleted, wasStatsCollectionCompleted, getLastCollectionTime } from "./utils/stats-tracking";
import {
  fetchClanLeaderboardInfo,
  saveLeaderboardData,
  loadLeaderboardData,
  compareLeaderboardData,
} from "./utils/leaderboard";
import { normalize } from "./utils/normalize";
import { trackFunctionPerformance } from "./commands/resources";
import { 
  info, 
  warn, 
  error, 
  logVoiceState, 
  logStats, 
  logSyncclan, 
  logQueue, 
  logReward,
  cleanupOldLogs 
} from "./utils/logger";
import * as fs from "fs";
import * as path from "path";

config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
});

const voiceCounts = new Map<string, number>();

const QUEUE_NICKNAME_EXCLUDE_IDS = [
  '642764542266310658', // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞
];
// --- –û—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ "–∑–∞–º–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫–æ–≤—ã–µ –±–æ–∏" ---
const QUEUE_CHANNEL_ID = "821082995188170783";
// –í –ø–∞–º—è—Ç–∏: userId -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∏–∫
const originalNicknames: Record<string, string> = {};
// –û—á–µ—Ä–µ–¥—å: userId[] ‚Äî –ø–æ—Ä—è–¥–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
let queueOrder: string[] = [];
const emojiNumbers = [
  "1Ô∏è‚É£",
  "2Ô∏è‚É£",
  "3Ô∏è‚É£",
  "4Ô∏è‚É£",
  "5Ô∏è‚É£",
  "6Ô∏è‚É£",
  "7Ô∏è‚É£",
  "8Ô∏è‚É£",
  "9Ô∏è‚É£",
  "üîü",
];

function stripEmojiNumber(nick: string): string {
  return nick.replace(/^(1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£|4Ô∏è‚É£|5Ô∏è‚É£|6Ô∏è‚É£|7Ô∏è‚É£|8Ô∏è‚É£|9Ô∏è‚É£|üîü)\s*/, "").trim();
}

async function updateQueueNicknames(guild: any, members: GuildMember[]) {
  const startTime = Date.now();
  
  for (let i = 0; i < queueOrder.length; i++) {
    const userId = queueOrder[i];
    const member = members.find(m => m.id === userId);
    if (!member) continue;
    const orig = originalNicknames[userId] || stripEmojiNumber(member.nickname || member.user.username);
    originalNicknames[userId] = orig;
    const num = i < emojiNumbers.length ? emojiNumbers[i] : (i+1).toString();
    const newNick = `${num} ${orig}`;
    if (QUEUE_NICKNAME_EXCLUDE_IDS.includes(userId)) {
      // –ù–µ –º–µ–Ω—è–µ–º –Ω–∏–∫, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
      logQueue(`(–ò—Å–∫–ª—é—á–µ–Ω–∏–µ) –ù–µ –º–µ–Ω—è–µ–º –Ω–∏–∫ –¥–ª—è ${orig} (ID: ${userId}), –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –Ω–æ–º–µ—Ä ${num}`);
      continue;
    }
    if (member.nickname !== newNick) {
      try {
        await member.setNickname(newNick, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª–∫–æ–≤—ã–µ –±–æ–∏");
      } catch (e) {
        logQueue(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ ${orig}`, e);
      }
    }
    logQueue(`${num} ${orig} (ID: ${member.id})`);
  }
  // –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏
  logQueue("–ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏:");
  for (let i = 0; i < queueOrder.length; i++) {
    const userId = queueOrder[i];
    const member = members.find((m) => m.id === userId);
    if (!member) continue;
    const orig = originalNicknames[userId];
    const num = i < emojiNumbers.length ? emojiNumbers[i] : (i + 1).toString();
    logQueue(`${num} ${orig} (ID: ${member.id})`);
  }
  
  trackFunctionPerformance('updateQueueNicknames', startTime);
}

async function removeQueueNumber(member: GuildMember | null) {
  if (!member) return;
  const orig =
    originalNicknames[member.id] ||
    stripEmojiNumber(member.nickname || member.user.username);
  if (member.nickname !== orig) {
    try {
      await member.setNickname(orig, "–í—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª–∫–æ–≤—ã–µ –±–æ–∏");
    } catch (e) {
      logQueue(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –Ω–∏–∫ ${orig}`, e);
    }
  }
  delete originalNicknames[member.id];
}

let lastQueueIds: string[] = [];

client.on("voiceStateUpdate", async (oldState, newState) => {
  const startTime = Date.now();
  
  const oldChannelId = oldState.channelId;
  const newChannelId = newState.channelId;
  const guild = oldState.guild || newState.guild;
  // –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ—á–µ—Ä–µ–¥–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º
  if (oldChannelId === QUEUE_CHANNEL_ID || newChannelId === QUEUE_CHANNEL_ID) {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    const channel = await guild.channels.fetch(QUEUE_CHANNEL_ID);
    const members =
      channel && channel.isVoiceBased()
        ? Array.from(channel.members.values())
            .map((m) => m as GuildMember)
            .filter((m) => !m.user.bot)
        : [];
    const currentIds = members.map((m) => m.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–æ—Å—Ç–∞–≤ –æ—á–µ—Ä–µ–¥–∏
    const changed =
      currentIds.length !== lastQueueIds.length ||
      currentIds.some((id, i) => id !== lastQueueIds[i]);

    if (!changed) {
      // –°–æ—Å—Ç–∞–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
      trackFunctionPerformance('voiceStateUpdate_skipped', startTime);
      return;
    }

    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É—Å—Ç ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    if (members.length === 0) {
      // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ–ª ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ–º—É –Ω–∏–∫
      if (
        oldChannelId === QUEUE_CHANNEL_ID &&
        newChannelId !== QUEUE_CHANNEL_ID &&
        oldState.member
      ) {
        await removeQueueNumber(oldState.member);
      }
      queueOrder = [];
      for (const id of Object.keys(originalNicknames))
        delete originalNicknames[id];
      logQueue("–û—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω–∞ (–∫–∞–Ω–∞–ª –ø—É—Å—Ç)");
      trackFunctionPerformance('voiceStateUpdate_empty', startTime);
      return;
    }
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ—Ö, –∫–æ–≥–æ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ
    queueOrder = queueOrder.filter((id) => currentIds.includes(id));
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
    for (const m of members) {
      if (!queueOrder.includes(m.id)) {
        queueOrder.push(m.id);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∏–∫ –±–µ–∑ emoji-–Ω–æ–º–µ—Ä–∞
        originalNicknames[m.id] = stripEmojiNumber(
          m.nickname || m.user.username
        );
      }
    }
    // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã—à–µ–ª ‚Äî —Å–Ω–∏–º–∞–µ–º –Ω–æ–º–µ—Ä
    if (
      oldChannelId === QUEUE_CHANNEL_ID &&
      newChannelId !== QUEUE_CHANNEL_ID &&
      oldState.member
    ) {
      await removeQueueNumber(oldState.member);
    }
    await updateQueueNicknames(guild, members);
    lastQueueIds = [...currentIds];
  }
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è voiceCounts ...
  for (const channelId of [oldChannelId, newChannelId]) {
    if (!channelId) continue;
    try {
      const channel = await guild.channels.fetch(channelId);
      if (channel?.isVoiceBased()) {
        const realCount = Array.from(channel.members.values()).filter(
          (m) => !m.user.bot
        ).length;
        const prev = voiceCounts.get(channelId);
        voiceCounts.set(channelId, realCount);
        if (prev !== realCount) {
          logVoiceState(`–ö–∞–Ω–∞–ª "${channel.name}" –æ–±–Ω–æ–≤–ª—ë–Ω: –±—ã–ª–æ ${prev ?? "?"}, —Å—Ç–∞–ª–æ ${realCount}`);
        }
      }
    } catch (err) {
      error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª ${channelId}`, err);
    }
  }
  
  trackFunctionPerformance('voiceStateUpdate', startTime);
});

function getNextStatsDelayMs() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
  const now = new Date();
  const mskHour = (now.getUTCHours() + 3) % 24;
  const minute = now.getMinutes();
  
  // –¶–µ–ª–µ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞: 16:50 –∏ 01:20 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
  const targets = [
    { h: 16, m: 50 },
    { h: 1, m: 20 },
  ];
  
  let minDiff = Infinity;
  let next = null;
  
  for (const t of targets) {
    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
    const today = new Date();
    today.setUTCHours(t.h - 3, t.m, 0, 0);
    
    let target = today;
    
    // –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if (today <= now) {
      target = new Date(today);
      target.setDate(target.getDate() + 1);
    }
    
    const diff = target.getTime() - now.getTime();
    if (diff > 0 && diff < minDiff) {
      minDiff = diff;
      next = target;
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è, –∂–¥–µ–º –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
  if (minDiff === Infinity || minDiff <= 0) {
    minDiff = 30000; // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
  }
  
  logStats(`–°–µ–π—á–∞—Å (–ú–°–ö): ${mskHour}:${minute < 10 ? "0" + minute : minute}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${Math.round(minDiff / 1000)} —Å–µ–∫ (${next?.toLocaleTimeString("ru-RU", {timeZone: "Europe/Moscow"})})`);
  return minDiff;
}

const SERVICE_ROLES = [
  "949669576935874570",
  "949669770377179196",
  "949669851440496761",
];
const HONOR_ROLE = "1217444648591687700";

const ACHIEVERS_PATH = path.join(__dirname, "..", "data", "season_achievers.json");

function loadAchievers(): Set<string> {
  if (!fs.existsSync(ACHIEVERS_PATH)) return new Set();
  try {
    const arr = JSON.parse(fs.readFileSync(ACHIEVERS_PATH, "utf-8"));
    return new Set(arr);
  } catch {
    return new Set();
  }
}

function saveAchievers(set: Set<string>) {
  fs.writeFileSync(ACHIEVERS_PATH, JSON.stringify(Array.from(set), null, 2), "utf-8");
}

function clearAchievers() {
  fs.writeFileSync(ACHIEVERS_PATH, "[]", "utf-8");
}

async function updateAchievers(client: Client, users: Record<string, UserData>, members: { nick: string; points: number }[]) {
  const achievers = loadAchievers();
  const tracked = loadJson<Record<string, TrackedPlayer>>(trackedPath);
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–∏–º –Ω–∏–∫ -> userId –∏–∑ users.json
  const nickToUserId = new Map<string, string>();
  for (const [uid, data] of Object.entries(users)) {
    if (data.nick) {
      nickToUserId.set(normalize(data.nick), uid);
    }
  }
  
  // –°–æ–ø–æ—Å—Ç–∞–≤–∏–º –Ω–∏–∫ -> userId –∏–∑ tracked.json (–µ—Å–ª–∏ –Ω–µ—Ç –≤ users.json)
  for (const [nick, data] of Object.entries(tracked)) {
    if (!nickToUserId.has(normalize(nick))) {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Discord —Å–µ—Ä–≤–µ—Ä–µ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É
      const guild = client.guilds.cache.first();
      if (guild) {
        try {
          // –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É –Ω–∏–∫–Ω–µ–π–º—É
          let member = await guild.members.search({ query: nick, limit: 1 });
          
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ø–æ —Ñ–æ—Ä–º–∞—Ç—É "DeDky4er (–ù–∏–∫–∏—Ç–∞)"
          if (member.size === 0) {
            const searchQuery = `${nick} (`;
            const searchResults = await guild.members.search({ query: searchQuery, limit: 10 });
            
            // –ò—â–µ–º —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω–∞—à–µ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞
            for (const [memberId, memberData] of searchResults) {
              const displayName = memberData.displayName || memberData.user.username;
              if (displayName.startsWith(nick + ' (')) {
                member = searchResults;
                break;
              }
            }
          }
          
          if (member.size > 0) {
            const userId = member.first()?.id;
            if (userId) {
              nickToUserId.set(normalize(nick), userId);
              logStats(`–ù–∞–π–¥–µ–Ω Discord ID –¥–ª—è ${nick}: ${userId}`);
            }
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–æ–∏—Å–∫–∞
        }
      }
    }
  }
  
  let addedCount = 0;
  for (const m of members) {
    if (m.points >= 1600) {
      const userId = nickToUserId.get(normalize(m.nick));
      if (userId) {
        const wasAdded = achievers.has(userId);
        achievers.add(userId);
        if (!wasAdded) {
          addedCount++;
          logStats(`–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–ª—è ${m.nick} (${m.points} –õ–ü–†)`);
        }
      } else {
        logStats(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ userId –¥–ª—è ${m.nick} (${m.points} –õ–ü–†) - –∏–≥—Ä–æ–∫ –Ω–µ –≤ Discord —Å–µ—Ä–≤–µ—Ä–µ`);
      }
    }
  }
  
  saveAchievers(achievers);
  logStats(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievers.size} –∏–≥—Ä–æ–∫–æ–≤ —Å 1600+ –õ–ü–† (–¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${addedCount})`);
}

async function handleSeasonEndRewards(guild: Guild, users: Record<string, UserData>) {
  const achievers = loadAchievers();
  logReward(`–ù–∞—á–∞–ª–æ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Å–µ–∑–æ–Ω. –î–æ—Å—Ç–∏–≥—à–∏—Ö 1600+ –õ–ü–†: ${achievers.size}`);
  
  for (const userId of achievers) {
    try {
      const member = await guild.members.fetch(userId);
      if (!member) continue;
      // –°–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–æ–ª–µ–π "–ó–∞ –±–µ–∑—É–ø—Ä–µ—á–Ω—É—é —Å–ª—É–∂–±—É"
      const hasRoles = SERVICE_ROLES.filter(rid => member.roles.cache.has(rid));
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ 3 ‚Äî —Å–Ω—è—Ç—å –∏—Ö –∏ –≤—ã–¥–∞—Ç—å –û—Ä–¥–µ–Ω
      if (hasRoles.length === 3) {
        await member.roles.remove(SERVICE_ROLES, "–ó–∞–º–µ–Ω–∞ –Ω–∞ –û—Ä–¥–µ–Ω –ü–æ—á—ë—Ç–Ω–æ–≥–æ –í–æ–∏–Ω–∞");
        await member.roles.add(HONOR_ROLE, "–í—ã–¥–∞–Ω –û—Ä–¥–µ–Ω –ü–æ—á—ë—Ç–Ω–æ–≥–æ –í–æ–∏–Ω–∞ –∑–∞ 3 —Å–ª—É–∂–±—ã");
        logReward(`${member.user.tag}: —Å–Ω—è—Ç—ã –≤—Å–µ —Å–ª—É–∂–±—ã, –≤—ã–¥–∞–Ω –û—Ä–¥–µ–Ω –ü–æ—á—ë—Ç–Ω–æ–≥–æ –í–æ–∏–Ω–∞`);
      } else if (hasRoles.length < 3) {
        // –í—ã–¥–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–æ–ª–µ–π
        const toGive = SERVICE_ROLES.find(rid => !member.roles.cache.has(rid));
        if (toGive) {
          await member.roles.add(toGive, "–í—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –ó–∞ –±–µ–∑—É–ø—Ä–µ—á–Ω—É—é —Å–ª—É–∂–±—É –∑–∞ 1600+ –õ–ü–†");
          logReward(`${member.user.tag}: –≤—ã–¥–∞–Ω–∞ —Å–ª—É–∂–±–∞ (${toGive})`);
        }
      }
    } catch (e) {
      logReward(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${userId}`, e);
    }
  }
  clearAchievers();
  logReward("–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω –≤—ã–¥–∞–Ω—ã, —Ñ–∞–π–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞
async function performFullClanSync(client: Client) {
  logSyncclan("–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞ ALLIANCE");
  
  try {
    const users = loadJson<Record<string, UserData>>(usersPath);
    const tracked = loadJson<Record<string, TrackedPlayer>>(trackedPath);
    const members = await fetchClanPoints("ALLIANCE");

    // 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞–π—Ç–∏ –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö
    const previousMembers = loadCurrentMembers();
    
    // –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π, —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    if (previousMembers.length === 0) {
      logSyncclan("–ü–µ—Ä–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∞–Ω–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö");
    } else {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      const currentNicks = new Set(members.map(m => normalize(m.nick)));
      const leavers = previousMembers.filter(m => !currentNicks.has(normalize(m.nick)));
      
      logSyncclan(`–ü—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${previousMembers.length}`);
      logSyncclan(`–¢–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${members.length}`);
      logSyncclan(`–ü–æ–∫–∏–Ω—É–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤: ${leavers.length}`);
      
      if (leavers.length > 0) {
        const channel = await client.channels.fetch("882263905009807390");
        const date = new Date().toLocaleDateString("ru-RU");
        for (const leaver of leavers) {
          const msg = `${leaver.nick} –ø–æ–∫–∏–Ω—É–ª –ø–æ–ª–∫ ${date} —Å ${leaver.points} –ª–ø—Ä`;
          if (channel && channel.isTextBased()) {
            await (channel as TextChannel).send(msg);
          }
        }
        logSyncclan(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö: ${leavers.length}`);
      }
    }

    // 3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π –∏ –¥–∞–Ω–Ω—ã—Ö
    const guild = client.guilds.cache.first();
    if (guild) {
      let syncCount = 0;
      
      for (const member of members) {
        const normalizedNick = normalize(member.nick);
        
        // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        let userId = null;
        for (const [id, userData] of Object.entries(users)) {
          if (userData.nick && normalize(userData.nick) === normalizedNick) {
            userId = id;
            break;
          }
        }
        
        if (userId) {
          // –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          users[userId].points = member.points;
         
          // –û–±–Ω–æ–≤–∏—Ç—å —Ä–æ–ª–∏
          try {
            const guildMember = await guild.members.fetch(userId);
            if (guildMember) {
              const hasServiceRole = SERVICE_ROLES.some(roleId => 
                guildMember.roles.cache.has(roleId)
              );
              
              if (member.points >= 1600 && !guildMember.roles.cache.has(HONOR_ROLE)) {
                await guildMember.roles.add(HONOR_ROLE);
                logSyncclan(`–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–æ–ª—å –ø–æ—á–µ—Ç–∞ –¥–ª—è ${member.nick} (${member.points} –æ—á–∫–æ–≤)`);
              } else if (member.points < 1600 && guildMember.roles.cache.has(HONOR_ROLE) && !hasServiceRole) {
                await guildMember.roles.remove(HONOR_ROLE);
                logSyncclan(`–£–±—Ä–∞–Ω–∞ —Ä–æ–ª—å –ø–æ—á–µ—Ç–∞ —É ${member.nick} (${member.points} –æ—á–∫–æ–≤)`);
              }
            }
          } catch (error) {
            logSyncclan(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–µ–π –¥–ª—è ${member.nick}: ${error}`);
          }
          
          syncCount++;
        } else {
          // –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö
          if (!tracked[normalizedNick]) {
            tracked[normalizedNick] = {
              trackedSince: new Date().toISOString(),
              assignedBy: "system",
              warnedAfter7d: false,
              warnedAfter14d: false,
              lastPoints: member.points
            };
            logSyncclan(`–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${member.nick} (${member.points} –æ—á–∫–æ–≤)`);
          } else {
            tracked[normalizedNick].lastPoints = member.points;
          }
        }
      }
      
      // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      saveJson(usersPath, users);
      saveJson(trackedPath, tracked);
      
      logSyncclan(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${syncCount} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è ${Object.keys(tracked).length} –∏–≥—Ä–æ–∫–æ–≤`);
    }

    // 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
    saveCurrentMembers(members);
    logSyncclan("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤");

  } catch (error: any) {
    logSyncclan(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞: ${error.message}`);
  }
}

async function statsScheduler(client: Client) {
  const startTime = Date.now();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
  const now = new Date();
  const mskHour = (now.getUTCHours() + 3) % 24;
  const minute = now.getMinutes();
  logStats(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ${mskHour}:${minute < 10 ? "0" + minute : minute}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ª–∏ –º—ã –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20
  const shouldCollectMissedStats = (mskHour > 1 || (mskHour === 1 && minute > 20)) && 
                                   (mskHour < 16 || (mskHour === 16 && minute < 50));
  
  if (shouldCollectMissedStats) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20 —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().slice(0, 10);
    const wasAlreadyCollected = wasStatsCollectionCompleted(today, "01:20", "stats");
    
    if (!wasAlreadyCollected) {
      logStats("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä —Å–µ–π—á–∞—Å");
      
      try {
        const members = await fetchClanPoints("ALLIANCE");
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const prev = loadCurrentMembers();
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
        logStats("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...");
        let currentLeaderboardInfo = null;
        try {
          currentLeaderboardInfo = await fetchClanLeaderboardInfo("ALLIANCE");
          if (currentLeaderboardInfo) {
            logStats(`–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: –º–µ—Å—Ç–æ ${currentLeaderboardInfo.position}, –æ—á–∫–∏ ${currentLeaderboardInfo.points}`);
          } else {
            logStats("–ü–æ–ª–∫ ALLIANCE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ");
          }
        } catch (error) {
          logStats(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${error}`);
        }
        const previousLeaderboardData = loadLeaderboardData();
        
        // –°—Ä–∞–≤–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const { totalDelta, changes } = compareMembersData(prev, members);
        
        let msg = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏ (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å–±–æ—Ä):**\n`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
        if (currentLeaderboardInfo && previousLeaderboardData) {
          const comparison = compareLeaderboardData(currentLeaderboardInfo, previousLeaderboardData);
          
          msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
          
          if (comparison.positionDirection === "up") {
            msg += `üìà –ü–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
          } else if (comparison.positionDirection === "down") {
            msg += `üìâ –û–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
          } else {
            msg += `‚û°Ô∏è –ú–µ—Å—Ç–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n`;
          }
          
          msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points.toLocaleString()}\n`;
          
          if (comparison.pointsDirection === "up") {
            msg += `üìà –ü–æ–ª—É—á–∏–ª–∏ ${comparison.pointsChange.toLocaleString()} –æ—á–∫–æ–≤\n`;
          } else if (comparison.pointsDirection === "down") {
            msg += `üìâ –ü–æ—Ç–µ—Ä—è–ª–∏ ${comparison.pointsChange.toLocaleString()} –æ—á–∫–æ–≤\n`;
          } else {
            msg += `‚û°Ô∏è –û—á–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å\n`;
          }
          
          msg += `\n`;
        } else if (currentLeaderboardInfo) {
          msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
          msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points.toLocaleString()}\n\n`;
        }
        
        if (changes.length > 0) {
          msg += `\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º:\n`;
          for (const { nick, delta } of changes.sort((a, b) => b.delta - a.delta)) {
            msg += `‚Ä¢ ${nick}: ${delta >= 0 ? "+" : ""}${delta}\n`;
          }
        } else {
          msg += `\n–ó–∞ —Å—É—Ç–∫–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—á–∫–æ–≤ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n`;
        }
        
        const channel = await client.channels.fetch(STATS_CHANNEL_ID);
        if (channel && channel.isTextBased()) {
          await (channel as TextChannel).send(msg);
          logStats("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å–±–æ—Ä)");
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        saveCurrentMembers(members);
        logStats("–û–±–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —Å–±–æ—Ä)");
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞: –≤—Å–µ points = 0
        if (members.every(p => p.points === 0)) {
          logStats("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ (–≤—Å–µ –æ—á–∫–∏ = 0), –∑–∞–ø—É—Å–∫ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥");
          const users = loadJson<Record<string, UserData>>(usersPath);
          const guild = client.guilds.cache.first();
          if (guild) {
            await handleSeasonEndRewards(guild, users);
          }
        }
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20 –≤—ã–ø–æ–ª–Ω–µ–Ω
        markStatsCollectionCompleted("01:20", "stats");
        logStats("–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20 –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π");
        
      } catch (error: any) {
        logStats(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try {
          const channel = await client.channels.fetch(STATS_CHANNEL_ID);
          if (channel && channel.isTextBased()) {
            await (channel as TextChannel).send(`‚ö†Ô∏è **–û—à–∏–±–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:** ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /syncclan –≤—Ä—É—á–Ω—É—é.`);
          }
        } catch (channelError) {
          logStats(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${channelError}`);
        }
      }
    }
  } else if (mskHour === 16 && minute === 50) {
    logStats("–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∞–Ω–∞ –∏ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (16:50)");
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∫–ª–∞–Ω–∞
    await performFullClanSync(client);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–æ–ª–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    logStats("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –ø–æ–ª–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...");
    const leaderboardInfo = await fetchClanLeaderboardInfo("ALLIANCE");
    if (leaderboardInfo) {
      const today = new Date().toISOString().slice(0, 10);
      saveLeaderboardData({
        date: today,
        position: leaderboardInfo.position,
        points: leaderboardInfo.points
      });
      logStats(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: –º–µ—Å—Ç–æ ${leaderboardInfo.position}, –æ—á–∫–∏ ${leaderboardInfo.points}`);
    } else {
      logStats("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ");
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const members = loadCurrentMembers();
    const users = loadJson<Record<string, UserData>>(usersPath);
    await updateAchievers(client, users, members);
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 16:50 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
    markStatsCollectionCompleted("16:50", "sync");
    logStats("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 16:50 –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è");
  } else if (mskHour === 1 && minute === 20) {
    logStats("–°–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (01:20)");
    
    try {
      const members = await fetchClanPoints("ALLIANCE");
      
      // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const prev = loadCurrentMembers();
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
      logStats("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...");
      let currentLeaderboardInfo = null;
      try {
        currentLeaderboardInfo = await fetchClanLeaderboardInfo("ALLIANCE");
        if (currentLeaderboardInfo) {
          logStats(`–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: –º–µ—Å—Ç–æ ${currentLeaderboardInfo.position}, –æ—á–∫–∏ ${currentLeaderboardInfo.points}`);
        } else {
          logStats("–ü–æ–ª–∫ ALLIANCE –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ");
        }
      } catch (error) {
        logStats(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: ${error}`);
      }
      const previousLeaderboardData = loadLeaderboardData();
      
      // –°—Ä–∞–≤–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const { totalDelta, changes } = compareMembersData(prev, members);
      
      let msg = `\uD83D\uDCCA **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:**\n`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
      if (currentLeaderboardInfo && previousLeaderboardData) {
        const comparison = compareLeaderboardData(currentLeaderboardInfo, previousLeaderboardData);
        
        msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
        
        if (comparison.positionDirection === "up") {
          msg += `üìà –ü–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
        } else if (comparison.positionDirection === "down") {
          msg += `üìâ –û–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
        } else {
          msg += `‚û°Ô∏è –ú–µ—Å—Ç–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n`;
        }
        
        msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points.toLocaleString()}\n`;
        
        if (comparison.pointsDirection === "up") {
          msg += `üìà –ü–æ–ª—É—á–∏–ª–∏ ${comparison.pointsChange.toLocaleString()} –æ—á–∫–æ–≤\n`;
        } else if (comparison.pointsDirection === "down") {
          msg += `üìâ –ü–æ—Ç–µ—Ä—è–ª–∏ ${comparison.pointsChange.toLocaleString()} –æ—á–∫–æ–≤\n`;
        } else {
          msg += `‚û°Ô∏è –û—á–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å\n`;
        }
        
        msg += `\n`;
      } else if (currentLeaderboardInfo) {
        msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
        msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points.toLocaleString()}\n\n`;
      }
      
      msg += `–ü–æ–ª–∫ –≤—Å–µ–≥–æ: ${totalDelta >= 0 ? "+" : ""}${totalDelta} –æ—á–∫–æ–≤\n`;
      
      if (changes.length > 0) {
        msg += `\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º:\n`;
        for (const { nick, delta } of changes.sort((a, b) => b.delta - a.delta)) {
          msg += `‚Ä¢ ${nick}: ${delta >= 0 ? "+" : ""}${delta}\n`;
        }
      } else {
        msg += `\n–ó–∞ —Å—É—Ç–∫–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—á–∫–æ–≤ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n`;
      }
      
      const channel = await client.channels.fetch(STATS_CHANNEL_ID);
      if (channel && channel.isTextBased()) {
        await (channel as TextChannel).send(msg);
        logStats("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª");
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
      saveCurrentMembers(members);
      logStats("–û–±–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏");
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞: –≤—Å–µ points = 0
      if (members.every(p => p.points === 0)) {
        logStats("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ (–≤—Å–µ –æ—á–∫–∏ = 0), –∑–∞–ø—É—Å–∫ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥");
        const users = loadJson<Record<string, UserData>>(usersPath);
        const guild = client.guilds.cache.first();
        if (guild) {
          await handleSeasonEndRewards(guild, users);
        }
      }
      
      // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20 –≤—ã–ø–æ–ª–Ω–µ–Ω
      markStatsCollectionCompleted("01:20", "stats");
      logStats("–°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 01:20 –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π");
    } catch (error: any) {
      logStats(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫–∞–Ω–∞–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      try {
        const channel = await client.channels.fetch(STATS_CHANNEL_ID);
        if (channel && channel.isTextBased()) {
          await (channel as TextChannel).send(`‚ö†Ô∏è **–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:** ${error.message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /syncclan –≤—Ä—É—á–Ω—É—é.`);
        }
      } catch (channelError) {
        logStats(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: ${channelError}`);
      }
    }
  } else {
    logStats("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
  
  trackFunctionPerformance('statsScheduler', startTime);
  const delay = Math.max(getNextStatsDelayMs(), 30000); // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  setTimeout(() => statsScheduler(client), delay);
}

function getNextSyncclanDelayMs() {
  const now = new Date();
  const mskHour = (now.getUTCHours() + 3) % 24;
  const minute = now.getMinutes();
  const second = now.getSeconds();
  
  // –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: 16:50 (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
  const targetHour = 16;
  const targetMinute = 50;
  
  // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–æ–¥–Ω—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const today = new Date();
  today.setUTCHours(targetHour - 3, targetMinute, 0, 0);
  
  // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤—Ç—Ä–∞ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  // –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –∑–∞–≤—Ç—Ä–∞)
  let target = today;
  if (today <= now) {
    target = tomorrow;
  }
  
  const diff = target.getTime() - now.getTime();
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è
  const finalDiff = Math.max(diff, 30000); // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
  
  logSyncclan(`–°–µ–π—á–∞—Å (–ú–°–ö): ${mskHour}:${minute < 10 ? "0" + minute : minute}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${Math.round(finalDiff / 1000)} —Å–µ–∫ (${target.toLocaleTimeString("ru-RU", {timeZone: "Europe/Moscow"})})`);
  return finalDiff;
}

async function syncclanScheduler(client: Client) {
  const startTime = Date.now();
  
  const now = new Date();
  const mskHour = (now.getUTCHours() + 3) % 24;
  const minute = now.getMinutes();
  
  logSyncclan(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ${mskHour}:${minute < 10 ? "0" + minute : minute}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –ª–∏ –º—ã –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ 16:50
  const shouldSyncMissed = (mskHour > 16 || (mskHour === 16 && minute > 50));
  
  if (shouldSyncMissed) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 16:50 —Å–µ–≥–æ–¥–Ω—è
    const today = new Date().toISOString().slice(0, 10);
    const wasAlreadySynced = wasStatsCollectionCompleted(today, "16:50", "sync");
    
    if (!wasAlreadySynced) {
      logSyncclan("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ 16:50, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–µ–π—á–∞—Å");
      
      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é
        await performFullClanSync(client);
        
        // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 16:50 –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
        markStatsCollectionCompleted("16:50", "sync");
        logSyncclan("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è 16:50 –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è");
      } catch (error) {
        logSyncclan(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error}`);
      }
    }
  } else {
    logSyncclan("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞");
  }
  
  trackFunctionPerformance('syncclanScheduler', startTime);
  const delay = Math.max(getNextSyncclanDelayMs(), 30000); // –ú–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  setTimeout(() => syncclanScheduler(client), delay);
}

client.once("ready", async () => {
  const guild = client.guilds.cache.first();
  if (!guild) return;

  info(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${client.user?.tag}`);

  for (const channelId of VOICE_CHANNEL_IDS) {
    const channel = await guild.channels.fetch(channelId);
    if (channel?.isVoiceBased()) {
      const realCount = Array.from(channel.members.values()).filter(
        (m) => !m.user.bot
      ).length;
      voiceCounts.set(channelId, realCount);

      logVoiceState(`–ö–∞–Ω–∞–ª "${channel.name}" –∑–∞–≥—Ä—É–∂–µ–Ω: ${realCount} —á–µ–ª–æ–≤–µ–∫(–∞)`);
    }
  }

  info("–ë–æ—Ç –≥–æ—Ç–æ–≤, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  cleanupOldLogs();
  
  pbNotifyScheduler(client);
  autoPbAnnounceScheduler(client);
  statsScheduler(client);
  syncclanScheduler(client);
});

client.on("guildMemberAdd", (member: GuildMember) => {
  const users = loadJson<Record<string, UserData>>(usersPath);

  if (!users[member.id]) {
    users[member.id] = {
      joinDate: new Date().toISOString(),
      points: 0,
      wasWarned: false,
      nick: member.user.username,
    };
    saveJson(usersPath, users);
    info(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${member.user.tag}`);
  }
});

process.on("unhandledRejection", (reason, promise) => {
  error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞", { reason, promise });
});

process.on("uncaughtException", (err) => {
  error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", err);
});

export { client, voiceCounts };
