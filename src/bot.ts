import {
  Client,
  GatewayIntentBits,
  GuildMember,
  Interaction,
  Message,
  User,
  TextChannel,
  Guild,
} from "discord.js";
import { config } from "dotenv";
import {
  usersPath,
  trackedPath,
  OFFICER_ROLE_IDS,
  ANNOUNCE_CHANNEL_ID,
  VOICE_CHANNEL_IDS,
  STATS_CHANNEL_ID,
} from "./constants";
import { loadJson, saveJson } from "./utils/json";
import { UserData, TrackedPlayer } from "./types";
import { pbNotifyScheduler, autoPbAnnounceScheduler } from "./utils/pbNotify";
import {
  saveMembersAtTime,
  loadMembersAtTime,
  fetchClanPoints,
  loadLeaversTracking,
  saveLeaversTracking,
  findLeaversFromTracking,
  saveMembersAlternating,
} from "./utils/clan";
import {
  fetchClanLeaderboardInfo,
  saveLeaderboardData,
  loadLeaderboardData,
  compareLeaderboardData,
} from "./utils/leaderboard";
import { normalize } from "./utils/normalize";
import { trackFunctionPerformance } from "./commands/resources";
import { 
  info, 
  warn, 
  error, 
  logVoiceState, 
  logStats, 
  logSyncclan, 
  logQueue, 
  logReward,
  cleanupOldLogs 
} from "./utils/logger";
import * as fs from "fs";
import * as path from "path";

config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildVoiceStates,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
  ],
});

const voiceCounts = new Map<string, number>();

const QUEUE_NICKNAME_EXCLUDE_IDS = [
  '642764542266310658', // ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å–µ—Ä–≤–µ—Ä–∞
];
// --- –û—á–µ—Ä–µ–¥—å –¥–ª—è –∫–∞–Ω–∞–ª–∞ "–∑–∞–º–µ–Ω–∞ –Ω–∞ –ø–æ–ª–∫–æ–≤—ã–µ –±–æ–∏" ---
const QUEUE_CHANNEL_ID = "821082995188170783";
// –í –ø–∞–º—è—Ç–∏: userId -> –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∏–∫
const originalNicknames: Record<string, string> = {};
// –û—á–µ—Ä–µ–¥—å: userId[] ‚Äî –ø–æ—Ä—è–¥–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
let queueOrder: string[] = [];
const emojiNumbers = [
  "1Ô∏è‚É£",
  "2Ô∏è‚É£",
  "3Ô∏è‚É£",
  "4Ô∏è‚É£",
  "5Ô∏è‚É£",
  "6Ô∏è‚É£",
  "7Ô∏è‚É£",
  "8Ô∏è‚É£",
  "9Ô∏è‚É£",
  "üîü",
];

function stripEmojiNumber(nick: string): string {
  return nick.replace(/^(1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£|4Ô∏è‚É£|5Ô∏è‚É£|6Ô∏è‚É£|7Ô∏è‚É£|8Ô∏è‚É£|9Ô∏è‚É£|üîü)\s*/, "").trim();
}

async function updateQueueNicknames(guild: any, members: GuildMember[]) {
  const startTime = Date.now();
  
  for (let i = 0; i < queueOrder.length; i++) {
    const userId = queueOrder[i];
    const member = members.find(m => m.id === userId);
    if (!member) continue;
    const orig = originalNicknames[userId] || stripEmojiNumber(member.nickname || member.user.username);
    originalNicknames[userId] = orig;
    const num = i < emojiNumbers.length ? emojiNumbers[i] : (i+1).toString();
    const newNick = `${num} ${orig}`;
    if (QUEUE_NICKNAME_EXCLUDE_IDS.includes(userId)) {
      // –ù–µ –º–µ–Ω—è–µ–º –Ω–∏–∫, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
      logQueue(`(–ò—Å–∫–ª—é—á–µ–Ω–∏–µ) –ù–µ –º–µ–Ω—è–µ–º –Ω–∏–∫ –¥–ª—è ${orig} (ID: ${userId}), –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –Ω–æ–º–µ—Ä ${num}`);
      continue;
    }
    if (member.nickname !== newNick) {
      try {
        await member.setNickname(newNick, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª–∫–æ–≤—ã–µ –±–æ–∏");
      } catch (e) {
        logQueue(`–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ ${orig}`, e);
      }
    }
    logQueue(`${num} ${orig} (ID: ${member.id})`);
  }
  // –ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏
  logQueue("–ò—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—á–µ—Ä–µ–¥–∏:");
  for (let i = 0; i < queueOrder.length; i++) {
    const userId = queueOrder[i];
    const member = members.find((m) => m.id === userId);
    if (!member) continue;
    const orig = originalNicknames[userId];
    const num = i < emojiNumbers.length ? emojiNumbers[i] : (i + 1).toString();
    logQueue(`${num} ${orig} (ID: ${member.id})`);
  }
  
  trackFunctionPerformance('updateQueueNicknames', startTime);
}

async function removeQueueNumber(member: GuildMember | null) {
  if (!member) return;
  const orig =
    originalNicknames[member.id] ||
    stripEmojiNumber(member.nickname || member.user.username);
  if (member.nickname !== orig) {
    try {
      await member.setNickname(orig, "–í—ã—Ö–æ–¥ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø–æ–ª–∫–æ–≤—ã–µ –±–æ–∏");
    } catch (e) {
      logQueue(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å –Ω–∏–∫ ${orig}`, e);
    }
  }
  delete originalNicknames[member.id];
}

let lastQueueIds: string[] = [];

client.on("voiceStateUpdate", async (oldState, newState) => {
  const startTime = Date.now();
  
  const oldChannelId = oldState.channelId;
  const newChannelId = newState.channelId;
  const guild = oldState.guild || newState.guild;
  // –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –æ—á–µ—Ä–µ–¥–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º
  if (oldChannelId === QUEUE_CHANNEL_ID || newChannelId === QUEUE_CHANNEL_ID) {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞
    const channel = await guild.channels.fetch(QUEUE_CHANNEL_ID);
    const members =
      channel && channel.isVoiceBased()
        ? Array.from(channel.members.values())
            .map((m) => m as GuildMember)
            .filter((m) => !m.user.bot)
        : [];
    const currentIds = members.map((m) => m.id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ —Å–æ—Å—Ç–∞–≤ –æ—á–µ—Ä–µ–¥–∏
    const changed =
      currentIds.length !== lastQueueIds.length ||
      currentIds.some((id, i) => id !== lastQueueIds[i]);

    if (!changed) {
      // –°–æ—Å—Ç–∞–≤ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∏–∫–Ω–µ–π–º—ã
      trackFunctionPerformance('voiceStateUpdate_skipped', startTime);
      return;
    }

    // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –ø—É—Å—Ç ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    if (members.length === 0) {
      // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤—ã—à–µ–ª ‚Äî –≤–µ—Ä–Ω—É—Ç—å –µ–º—É –Ω–∏–∫
      if (
        oldChannelId === QUEUE_CHANNEL_ID &&
        newChannelId !== QUEUE_CHANNEL_ID &&
        oldState.member
      ) {
        await removeQueueNumber(oldState.member);
      }
      queueOrder = [];
      for (const id of Object.keys(originalNicknames))
        delete originalNicknames[id];
      logQueue("–û—á–µ—Ä–µ–¥—å —Å–±—Ä–æ—à–µ–Ω–∞ (–∫–∞–Ω–∞–ª –ø—É—Å—Ç)");
      trackFunctionPerformance('voiceStateUpdate_empty', startTime);
      return;
    }
    // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Ç–µ—Ö, –∫–æ–≥–æ –Ω–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ
    queueOrder = queueOrder.filter((id) => currentIds.includes(id));
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
    for (const m of members) {
      if (!queueOrder.includes(m.id)) {
        queueOrder.push(m.id);
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–∏–∫ –±–µ–∑ emoji-–Ω–æ–º–µ—Ä–∞
        originalNicknames[m.id] = stripEmojiNumber(
          m.nickname || m.user.username
        );
      }
    }
    // –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã—à–µ–ª ‚Äî —Å–Ω–∏–º–∞–µ–º –Ω–æ–º–µ—Ä
    if (
      oldChannelId === QUEUE_CHANNEL_ID &&
      newChannelId !== QUEUE_CHANNEL_ID &&
      oldState.member
    ) {
      await removeQueueNumber(oldState.member);
    }
    await updateQueueNicknames(guild, members);
    lastQueueIds = [...currentIds];
  }
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è voiceCounts ...
  for (const channelId of [oldChannelId, newChannelId]) {
    if (!channelId) continue;
    try {
      const channel = await guild.channels.fetch(channelId);
      if (channel?.isVoiceBased()) {
        const realCount = Array.from(channel.members.values()).filter(
          (m) => !m.user.bot
        ).length;
        const prev = voiceCounts.get(channelId);
        voiceCounts.set(channelId, realCount);
        if (prev !== realCount) {
          logVoiceState(`–ö–∞–Ω–∞–ª "${channel.name}" –æ–±–Ω–æ–≤–ª—ë–Ω: –±—ã–ª–æ ${prev ?? "?"}, —Å—Ç–∞–ª–æ ${realCount}`);
        }
      }
    } catch (err) {
      error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª ${channelId}`, err);
    }
  }
  
  trackFunctionPerformance('voiceStateUpdate', startTime);
});

function getNextStatsDelayMs() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è
  const now = new Date();
  const hour = now.getHours();
  const minute = now.getMinutes();
  // –¶–µ–ª–µ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞: 16:50 –∏ 01:20
  const targets = [
    { h: 16, m: 50 },
    { h: 1, m: 20 },
  ];
  let minDiff = Infinity;
  let next = null;
  for (const t of targets) {
    let target = new Date(now);
    target.setHours(t.h, t.m, 0, 0);
    if (target <= now) target.setDate(target.getDate() + 1);
    const diff = target.getTime() - now.getTime();
    if (diff < minDiff) {
      minDiff = diff;
      next = target;
    }
  }
  logStats(`–°–µ–π—á–∞—Å (—Å–µ—Ä–≤–µ—Ä): ${now.toLocaleTimeString("ru-RU")}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${Math.round(minDiff / 1000)} —Å–µ–∫ (${next?.toLocaleTimeString("ru-RU")})`);
  return minDiff;
}

const SERVICE_ROLES = [
  "949669576935874570",
  "949669770377179196",
  "949669851440496761",
];
const HONOR_ROLE = "1217444648591687700";

const ACHIEVERS_PATH = path.join(__dirname, "..", "data", "season_achievers.json");

function loadAchievers(): Set<string> {
  if (!fs.existsSync(ACHIEVERS_PATH)) return new Set();
  try {
    const arr = JSON.parse(fs.readFileSync(ACHIEVERS_PATH, "utf-8"));
    return new Set(arr);
  } catch {
    return new Set();
  }
}

function saveAchievers(set: Set<string>) {
  fs.writeFileSync(ACHIEVERS_PATH, JSON.stringify(Array.from(set), null, 2), "utf-8");
}

function clearAchievers() {
  fs.writeFileSync(ACHIEVERS_PATH, "[]", "utf-8");
}

async function updateAchievers(users: Record<string, UserData>, members: { nick: string; points: number }[]) {
  const achievers = loadAchievers();
  // –°–æ–ø–æ—Å—Ç–∞–≤–∏–º –Ω–∏–∫ -> userId
  const nickToUserId = new Map<string, string>();
  for (const [uid, data] of Object.entries(users)) {
    nickToUserId.set(normalize(data.nick), uid);
  }
  for (const m of members) {
    if (m.points >= 1600) {
      const userId = nickToUserId.get(normalize(m.nick));
      if (userId) achievers.add(userId);
    }
  }
  saveAchievers(achievers);
  logStats(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievers.size} –∏–≥—Ä–æ–∫–æ–≤ —Å 1600+ –õ–ü–†`);
}

async function handleSeasonEndRewards(guild: Guild, users: Record<string, UserData>) {
  const achievers = loadAchievers();
  logReward(`–ù–∞—á–∞–ª–æ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Å–µ–∑–æ–Ω. –î–æ—Å—Ç–∏–≥—à–∏—Ö 1600+ –õ–ü–†: ${achievers.size}`);
  
  for (const userId of achievers) {
    try {
      const member = await guild.members.fetch(userId);
      if (!member) continue;
      // –°–∫–æ–ª—å–∫–æ —É–∂–µ —Ä–æ–ª–µ–π "–ó–∞ –±–µ–∑—É–ø—Ä–µ—á–Ω—É—é —Å–ª—É–∂–±—É"
      const hasRoles = SERVICE_ROLES.filter(rid => member.roles.cache.has(rid));
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Å–µ 3 ‚Äî —Å–Ω—è—Ç—å –∏—Ö –∏ –≤—ã–¥–∞—Ç—å –û—Ä–¥–µ–Ω
      if (hasRoles.length === 3) {
        await member.roles.remove(SERVICE_ROLES, "–ó–∞–º–µ–Ω–∞ –Ω–∞ –û—Ä–¥–µ–Ω –ü–æ—á—ë—Ç–Ω–æ–≥–æ –í–æ–∏–Ω–∞");
        await member.roles.add(HONOR_ROLE, "–í—ã–¥–∞–Ω –û—Ä–¥–µ–Ω –ü–æ—á—ë—Ç–Ω–æ–≥–æ –í–æ–∏–Ω–∞ –∑–∞ 3 —Å–ª—É–∂–±—ã");
        logReward(`${member.user.tag}: —Å–Ω—è—Ç—ã –≤—Å–µ —Å–ª—É–∂–±—ã, –≤—ã–¥–∞–Ω –û—Ä–¥–µ–Ω –ü–æ—á—ë—Ç–Ω–æ–≥–æ –í–æ–∏–Ω–∞`);
      } else if (hasRoles.length < 3) {
        // –í—ã–¥–∞—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ä–æ–ª–µ–π
        const toGive = SERVICE_ROLES.find(rid => !member.roles.cache.has(rid));
        if (toGive) {
          await member.roles.add(toGive, "–í—ã–¥–∞–Ω–∞ —Ä–æ–ª—å –ó–∞ –±–µ–∑—É–ø—Ä–µ—á–Ω—É—é —Å–ª—É–∂–±—É –∑–∞ 1600+ –õ–ü–†");
          logReward(`${member.user.tag}: –≤—ã–¥–∞–Ω–∞ —Å–ª—É–∂–±–∞ (${toGive})`);
        }
      }
    } catch (e) {
      logReward(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ${userId}`, e);
    }
  }
  clearAchievers();
  logReward("–ù–∞–≥—Ä–∞–¥—ã –∑–∞ —Å–µ–∑–æ–Ω –≤—ã–¥–∞–Ω—ã, —Ñ–∞–π–ª –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –æ—á–∏—â–µ–Ω");
}

async function statsScheduler(client: Client) {
  const startTime = Date.now();
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è
  const now = new Date();
  const hour = now.getHours();
  const minute = now.getMinutes();
  logStats(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ${hour}:${minute < 10 ? "0" + minute : minute}`);
  
  if (hour === 16 && minute === 50) {
    logStats("–°–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (16:50)");
    const members = await fetchClanPoints("ALLIANCE");
    saveMembersAtTime(members, "1650");
    logStats("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (1650)");
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –ø–æ–ª–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    logStats("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –ø–æ–ª–∫–∞ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...");
    const leaderboardInfo = await fetchClanLeaderboardInfo("ALLIANCE");
    if (leaderboardInfo) {
      const today = new Date().toISOString().slice(0, 10);
      saveLeaderboardData({
        date: today,
        position: leaderboardInfo.position,
        points: leaderboardInfo.points
      });
      logStats(`–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ: –º–µ—Å—Ç–æ ${leaderboardInfo.position}, –æ—á–∫–∏ ${leaderboardInfo.points}`);
    } else {
      logStats("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ");
    }
    
    const users = loadJson<Record<string, UserData>>(usersPath);
    await updateAchievers(users, members);
  } else if (hour === 1 && minute === 20) {
    logStats("–°–±–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (01:20)");
    const members = await fetchClanPoints("ALLIANCE");
    saveMembersAtTime(members, "0120");
    logStats("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0120)");
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    logStats("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ...");
    const currentLeaderboardInfo = await fetchClanLeaderboardInfo("ALLIANCE");
    const previousLeaderboardData = loadLeaderboardData();
    
    // –°—Ä–∞–≤–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const prev = loadMembersAtTime("1650");
    const curr = loadMembersAtTime("0120");
    const prevMap = new Map(prev.map((p) => [normalize(p.nick), p]));
    const currMap = new Map(curr.map((c) => [normalize(c.nick), c]));
    let totalDelta = 0;
    const changes = [];
    for (const [nickNorm, currPlayer] of currMap.entries()) {
      const prevPlayer = prevMap.get(nickNorm);
      if (prevPlayer) {
        const delta = currPlayer.points - prevPlayer.points;
        if (delta !== 0) {
          changes.push({ nick: currPlayer.nick, delta });
          totalDelta += delta;
        }
      }
    }
    
    let msg = `\uD83D\uDCCA **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:**\n`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ
    if (currentLeaderboardInfo && previousLeaderboardData) {
      const comparison = compareLeaderboardData(currentLeaderboardInfo, previousLeaderboardData);
      
      msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
      
      if (comparison.positionDirection === "up") {
        msg += `üìà –ü–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
      } else if (comparison.positionDirection === "down") {
        msg += `üìâ –û–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ ${comparison.positionChange} –º–µ—Å—Ç\n`;
      } else {
        msg += `‚û°Ô∏è –ú–µ—Å—Ç–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n`;
      }
      
      msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points}\n`;
      
      if (comparison.pointsDirection === "up") {
        msg += `üìà –ü–æ–ª—É—á–∏–ª–∏ ${comparison.pointsChange} –æ—á–∫–æ–≤\n`;
      } else if (comparison.pointsDirection === "down") {
        msg += `üìâ –ü–æ—Ç–µ—Ä—è–ª–∏ ${comparison.pointsChange} –æ—á–∫–æ–≤\n`;
      } else {
        msg += `‚û°Ô∏è –û—á–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å\n`;
      }
      
      msg += `\n`;
    } else if (currentLeaderboardInfo) {
      msg += `üèÜ **–ú–µ—Å—Ç–æ –≤ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–µ:** ${currentLeaderboardInfo.position}\n`;
      msg += `üíé **–û—á–∫–∏ –ø–æ–ª–∫–∞:** ${currentLeaderboardInfo.points}\n\n`;
    }
    
    msg += `–ü–æ–ª–∫ –≤—Å–µ–≥–æ: ${totalDelta >= 0 ? "+" : ""}${totalDelta} –æ—á–∫–æ–≤\n`;
    
    if (changes.length > 0) {
      msg += `\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º:\n`;
      for (const { nick, delta } of changes.sort((a, b) => b.delta - a.delta)) {
        msg += `‚Ä¢ ${nick}: ${delta >= 0 ? "+" : ""}${delta}\n`;
      }
    } else {
      msg += `\n–ó–∞ —Å—É—Ç–∫–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—á–∫–æ–≤ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n`;
    }
    
    const channel = await client.channels.fetch(STATS_CHANNEL_ID);
    if (channel && channel.isTextBased()) {
      await (channel as TextChannel).send(msg);
      logStats("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–Ω–∞–ª");
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Å–µ–∑–æ–Ω–∞: –≤—Å–µ points = 0
    if (curr.every(p => p.points === 0)) {
      logStats("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ (–≤—Å–µ –æ—á–∫–∏ = 0), –∑–∞–ø—É—Å–∫ –≤—ã–¥–∞—á–∏ –Ω–∞–≥—Ä–∞–¥");
      const users = loadJson<Record<string, UserData>>(usersPath);
      const guild = client.guilds.cache.first();
      if (guild) {
        await handleSeasonEndRewards(guild, users);
      }
    }
  } else {
    logStats("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
  }
  
  trackFunctionPerformance('statsScheduler', startTime);
  setTimeout(() => statsScheduler(client), getNextStatsDelayMs());
}

function getNextSyncclanDelayMs() {
  const now = new Date();
  const hour = now.getHours();
  const minute = now.getMinutes();
  const second = now.getSeconds();
  
  // –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: 12:00
  const targetHour = 12;
  const targetMinute = 0;
  
  let target = new Date(now);
  target.setHours(targetHour, targetMinute, 0, 0);
  
  // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 12:00 —É–∂–µ –ø—Ä–æ—à–ª–æ, –∂–¥–µ–º –¥–æ –∑–∞–≤—Ç—Ä–∞
  if (target <= now) {
    target.setDate(target.getDate() + 1);
  }
  
  const diff = target.getTime() - now.getTime();
  logSyncclan(`–°–µ–π—á–∞—Å: ${now.toLocaleTimeString("ru-RU")}, —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${Math.round(diff / 1000)} —Å–µ–∫ (${target.toLocaleTimeString("ru-RU")})`);
  return diff;
}

async function syncclanScheduler(client: Client) {
  const startTime = Date.now();
  
  const now = new Date();
  const hour = now.getHours();
  const minute = now.getMinutes();
  
  logSyncclan(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: ${hour}:${minute < 10 ? "0" + minute : minute}`);
  
  if (hour === 12 && minute === 0) {
    logSyncclan("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞ ALLIANCE");
    
    try {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã syncclan ALLIANCE
      const users = loadJson<Record<string, UserData>>(usersPath);
      const tracked = loadJson<Record<string, TrackedPlayer>>(trackedPath);
      const members = await fetchClanPoints("ALLIANCE");

      // 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –Ω–∞–π—Ç–∏ –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö
      const trackedMembers = loadLeaversTracking();
      
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—É—Å—Ç–æ–π, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
      if (trackedMembers.length === 0) {
        logSyncclan("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤");
        saveLeaversTracking(members);
        logSyncclan(`–§–∞–π–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å ${members.length} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–ª–∞–Ω–∞ ALLIANCE`);
      } else {
        const leavers = findLeaversFromTracking(members);
        logSyncclan(`trackedMembers: ${trackedMembers.map(m => m.nick)}`);
        logSyncclan(`currentMembers: ${members.map(m => m.nick)}`);
        logSyncclan(`leavers: ${leavers.map(m => m.nick)}`);
        
        if (leavers.length > 0) {
          const channel = await client.channels.fetch("882263905009807390");
          const date = new Date().toLocaleDateString("ru-RU");
          for (const leaver of leavers) {
            const msg = `${leaver.nick} –ø–æ–∫–∏–Ω—É–ª –ø–æ–ª–∫ ${date} —Å ${leaver.points} –ª–ø—Ä`;
            if (channel && channel.isTextBased()) {
              await (channel as TextChannel).send(msg);
            }
          }
          logSyncclan(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–∫–∏–Ω—É–≤—à–∏—Ö: ${leavers.length}`);
        }

        // 2. –û–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        saveLeaversTracking(members);
      }

      // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ñ–∞–π–ª (–¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
      saveMembersAlternating(members);

      let count = 0;
      for (const m of members) {
        const uid = Object.keys(users).find(
          (id) => normalize(users[id].nick ?? "") === normalize(m.nick)
        );
        if (uid) {
          users[uid].points = m.points;
          count++;
        }
        const trackedKey = Object.keys(tracked).find(
          (t) => normalize(t) === normalize(m.nick)
        );
        if (trackedKey) {
          tracked[trackedKey].lastPoints = m.points;
          count++;
        }
      }

      saveJson(usersPath, users);
      saveJson(trackedPath, tracked);

      logSyncclan(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–ª–∞–Ω—É ALLIANCE`);
    } catch (error: any) {
      error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏", error);
    }
  } else {
    logSyncclan("–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª–∞–Ω–∞");
  }
  
  trackFunctionPerformance('syncclanScheduler', startTime);
  setTimeout(() => syncclanScheduler(client), getNextSyncclanDelayMs());
}

client.once("ready", async () => {
  const guild = client.guilds.cache.first();
  if (!guild) return;

  info(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${client.user?.tag}`);

  for (const channelId of VOICE_CHANNEL_IDS) {
    const channel = await guild.channels.fetch(channelId);
    if (channel?.isVoiceBased()) {
      const realCount = Array.from(channel.members.values()).filter(
        (m) => !m.user.bot
      ).length;
      voiceCounts.set(channelId, realCount);

      logVoiceState(`–ö–∞–Ω–∞–ª "${channel.name}" –∑–∞–≥—Ä—É–∂–µ–Ω: ${realCount} —á–µ–ª–æ–≤–µ–∫(–∞)`);
    }
  }

  info("–ë–æ—Ç –≥–æ—Ç–æ–≤, –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã");
  
  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  cleanupOldLogs();
  
  pbNotifyScheduler(client);
  autoPbAnnounceScheduler(client);
  statsScheduler(client);
  syncclanScheduler(client);
});

client.on("guildMemberAdd", (member: GuildMember) => {
  const users = loadJson<Record<string, UserData>>(usersPath);

  if (!users[member.id]) {
    users[member.id] = {
      joinDate: new Date().toISOString(),
      points: 0,
      wasWarned: false,
      nick: member.user.username,
    };
    saveJson(usersPath, users);
    info(`–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: ${member.user.tag}`);
  }
});

process.on("unhandledRejection", (reason, promise) => {
  error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞", { reason, promise });
});

process.on("uncaughtException", (err) => {
  error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", err);
});

export { client, voiceCounts };
