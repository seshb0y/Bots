// index.ts
import { config } from "dotenv";
import { client } from "./bot";
import { setupCommands } from "./commands";
import { info, error } from "./utils/logger";
import { runPreStartTests } from "./tests";

config();

async function startBot() {
  info("üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞...");
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  const testsPass = await runPreStartTests();
  
  if (!testsPass) {
    error("‚ùå –ü—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.");
    // –í production —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    if (process.env.NODE_ENV === 'production') {
      error("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ —Å –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏!");
    } else {
      process.exit(1);
    }
  }
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥
  setupCommands(client);
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
  process.on("unhandledRejection", (reason, promise) => {
    error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞", { reason, promise });
  });
  
  process.on("uncaughtException", (err) => {
    error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ", err);
  });
  
  // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
  try {
    await client.login(process.env.DISCORD_TOKEN);
    info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ Discord –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
  } catch (err) {
    error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Discord", err);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
startBot().catch((err) => {
  error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", err);
  process.exit(1);
});
