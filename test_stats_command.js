const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
const membersCurrentPath = path.join(__dirname, 'data', 'members_current.json');

function loadJson(filePath) {
  if (!fs.existsSync(filePath)) return [];
  try {
    return JSON.parse(fs.readFileSync(filePath, 'utf-8'));
  } catch {
    return [];
  }
}

function normalize(nick) {
  return nick.toLowerCase().replace(/\s+/g, "").trim();
}

function compareMembersData(prev, curr) {
  const prevMap = new Map(prev.map(p => [normalize(p.nick), p]));
  const currMap = new Map(curr.map(c => [normalize(c.nick), c]));
  
  let totalDelta = 0;
  const changes = [];
  
  for (const [nickNorm, currPlayer] of currMap.entries()) {
    const prevPlayer = prevMap.get(nickNorm);
    if (prevPlayer) {
      const delta = currPlayer.points - prevPlayer.points;
      if (delta !== 0) {
        changes.push({ nick: currPlayer.nick, delta });
        totalDelta += delta;
      }
    }
  }
  
  return { totalDelta, changes };
}

// –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 01:20 –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
const apiData = loadJson(path.join(__dirname, 'data', 'members_0120.json'));
const currentData = loadJson(membersCurrentPath);

console.log('=== –¢–ï–°–¢ –ö–û–ú–ê–ù–î–´ /STATS ===');
console.log(`–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ: ${currentData.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
console.log(`API –¥–∞–Ω–Ω—ã–µ: ${apiData.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);

// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
const { totalDelta, changes } = compareMembersData(currentData, apiData);

console.log(`\n–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${totalDelta >= 0 ? '+' : ''}${totalDelta} –æ—á–∫–æ–≤`);
console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${changes.length}`);

if (changes.length > 0) {
  console.log('\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º:');
  changes.sort((a, b) => b.delta - a.delta).forEach(change => {
    console.log(`‚Ä¢ ${change.nick}: ${change.delta >= 0 ? '+' : ''}${change.delta}`);
  });
} else {
  console.log('\n–ó–∞ —Å—É—Ç–∫–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—á–∫–æ–≤ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.');
}

// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –∫–æ–º–∞–Ω–¥–µ stats
let msg = `üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—É—Ç–∫–∏:**\n`;
msg += `–ü–æ–ª–∫ –≤—Å–µ–≥–æ: ${totalDelta >= 0 ? "+" : ""}${totalDelta} –æ—á–∫–æ–≤\n`;

if (changes.length > 0) {
  msg += `\n–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ –∏–≥—Ä–æ–∫–∞–º:\n`;
  for (const { nick, delta } of changes.sort((a, b) => b.delta - a.delta)) {
    msg += `‚Ä¢ ${nick}: ${delta >= 0 ? "+" : ""}${delta}\n`;
  }
} else {
  msg += `\n–ó–∞ —Å—É—Ç–∫–∏ –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π –æ—á–∫–æ–≤ –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞.\n`;
}

console.log('\n=== –°–û–û–ë–©–ï–ù–ò–ï –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò ===');
console.log(msg);
